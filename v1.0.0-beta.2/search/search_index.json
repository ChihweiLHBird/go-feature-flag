{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"go-feature-flag Feature flags with no complex system to maintain! What is go-feature-flag? A simple and complete feature flag solution, without any complex backend system to install, all you need is a file as your backend. No server is needed, just add a file to your central system and all your services will react to the changes in this file. If you are not familiar with feature flags, also called feature Toggles, you can read this article from Martin Fowler where he explains why this is a great pattern. I've also written an article that explains why feature flags can fasten your iteration cycle. go-feature-flags supports: Storing your configuration flags file on various locations ( HTTP , S3 , file , kubernetes , and more ). Configuring your flags in various format ( JSON , TOML and YAML ). Adding complex rules to target your users. Use complex rollout strategy for your flags : Run A/B testing experimentation . Progressively rollout a feature . Schedule your flag updates . Exporting your flags usage data ( s3 , log and file ). Getting notified when a flag has been changed ( webhook and slack ).","title":"Home"},{"location":"#go-feature-flag","text":"Feature flags with no complex system to maintain!","title":"go-feature-flag"},{"location":"#what-is-go-feature-flag","text":"A simple and complete feature flag solution, without any complex backend system to install, all you need is a file as your backend. No server is needed, just add a file to your central system and all your services will react to the changes in this file. If you are not familiar with feature flags, also called feature Toggles, you can read this article from Martin Fowler where he explains why this is a great pattern. I've also written an article that explains why feature flags can fasten your iteration cycle. go-feature-flags supports: Storing your configuration flags file on various locations ( HTTP , S3 , file , kubernetes , and more ). Configuring your flags in various format ( JSON , TOML and YAML ). Adding complex rules to target your users. Use complex rollout strategy for your flags : Run A/B testing experimentation . Progressively rollout a feature . Schedule your flag updates . Exporting your flags usage data ( s3 , log and file ). Getting notified when a flag has been changed ( webhook and slack ).","title":"What is go-feature-flag?"},{"location":"configuration/","text":"Configuration go-feature-flag needs to be initialized to be used. During the initialization you must give a ffclient.Config{} configuration object. ffclient.Config{} is the only location where you can put the configuration. Configuration fields Field Description Retriever The configuration retriever you want to use to get your flag file See Store your flag file for the configuration details . Context (optional) The context used by the retriever. Default: context.Background() Environment (optional) The environment the app is running under, can be checked in feature flag rules. Default: \"\" Check \"environments\" section to understand how to use this parameter. DataExporter (optional) DataExporter defines how to export data on how your flags are used. see export data section for more details . FileFormat (optional) Format of your configuration file. Available formats are yaml , toml and json , if you omit the field it will try to unmarshal the file as a yaml file. Default: YAML Logger (optional) Logger used to log what go-feature-flag is doing. If no logger is provided the module will not log anything. Default: No log Notifiers (optional) List of notifiers to call when your flag file has been changed. See notifiers section for more details . PollingInterval (optional) Duration to wait before refreshing the flags. The minimum polling interval is 1 second. Default: 60 * time.Second StartWithRetrieverError (optional) If true , the SDK will start even if we did not get any flags from the retriever. It will serve only default values until the retriever returns the flags. The init method will not return any error if the flag file is unreachable. Default: false Offline (optional) If true , the SDK will not try to retrieve the flag file and will not export any data. No notification will be send neither. Default: false Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ffclient . Init ( ffclient . Config { PollingInterval : 3 * time . Second , Logger : log . New ( file , \"/tmp/log\" , 0 ), Context : context . Background (), Environment : os . Getenv ( \"MYAPP_ENV\" ), Retriever : & fileretriever . Retriever { Path : \"testdata/flag-config.yaml\" }, FileFormat : \"yaml\" , Notifiers : [] notifier . Notifier { & webhooknotifier . Notifier { EndpointURL : \" https://example.com/hook\" , Secret : \"Secret\" , Meta : map [ string ] string { \"app.name\" : \"my app\" , }, }, }, DataExporter : ffclient . DataExporter { FlushInterval : 10 * time . Second , MaxEventInMemory : 1000 , Exporter : & file . Exporter { OutputDir : \"/output-data/\" , }, }, StartWithRetrieverError : false , }) Multiple configuration flag files go-feature-flag comes ready to use out of the box by calling the Init function and it will be available everywhere. Since most applications will want to use a single central flag configuration, the package provides this. It is similar to a singleton. In all the examples above, they demonstrate using go-feature-flag in its singleton style approach. Working with multiple go-feature-flag You can also create many go-feature-flag clients to use in your application. Each will have its own unique set of configurations and flags. Each can read from a different config file and from different places. All the functions that go-feature-flag package supports are mirrored as methods on a GoFeatureFlag . Example 1 2 3 4 5 6 7 8 9 10 11 x , err := ffclient . New ( Config { Retriever : & httpretriever . Retriever {{ URL : \"http://example.com/flag-config.yaml\" ,}}) defer x . Close () y , err := ffclient . New ( Config { Retriever : & httpretriever . Retriever {{ URL : \"http://example.com/test2.yaml\" ,}}) defer y . Close () user := ffuser . NewUser ( \"user-key\" ) x . BoolVariation ( \"test-flag\" , user , false ) y . BoolVariation ( \"test-flag\" , user , false ) // ... When working with multiple GoFeatureFlag , it is up to the user to keep track of the different GoFeatureFlag instances. Offline mode In some situations, you might want to stop making remote calls and fall back to default values for your feature flags. For example, if your software is both cloud-hosted and distributed to customers to run on-premise, it might make sense to fall back to defaults when running on-premise. You can do this by setting Offline mode in the client's Config. Advanced configuration Export data from your flag variations Be notified when your flags change","title":"Configuration"},{"location":"configuration/#configuration","text":"go-feature-flag needs to be initialized to be used. During the initialization you must give a ffclient.Config{} configuration object. ffclient.Config{} is the only location where you can put the configuration.","title":"Configuration"},{"location":"configuration/#configuration-fields","text":"Field Description Retriever The configuration retriever you want to use to get your flag file See Store your flag file for the configuration details . Context (optional) The context used by the retriever. Default: context.Background() Environment (optional) The environment the app is running under, can be checked in feature flag rules. Default: \"\" Check \"environments\" section to understand how to use this parameter. DataExporter (optional) DataExporter defines how to export data on how your flags are used. see export data section for more details . FileFormat (optional) Format of your configuration file. Available formats are yaml , toml and json , if you omit the field it will try to unmarshal the file as a yaml file. Default: YAML Logger (optional) Logger used to log what go-feature-flag is doing. If no logger is provided the module will not log anything. Default: No log Notifiers (optional) List of notifiers to call when your flag file has been changed. See notifiers section for more details . PollingInterval (optional) Duration to wait before refreshing the flags. The minimum polling interval is 1 second. Default: 60 * time.Second StartWithRetrieverError (optional) If true , the SDK will start even if we did not get any flags from the retriever. It will serve only default values until the retriever returns the flags. The init method will not return any error if the flag file is unreachable. Default: false Offline (optional) If true , the SDK will not try to retrieve the flag file and will not export any data. No notification will be send neither. Default: false","title":"Configuration fields"},{"location":"configuration/#example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ffclient . Init ( ffclient . Config { PollingInterval : 3 * time . Second , Logger : log . New ( file , \"/tmp/log\" , 0 ), Context : context . Background (), Environment : os . Getenv ( \"MYAPP_ENV\" ), Retriever : & fileretriever . Retriever { Path : \"testdata/flag-config.yaml\" }, FileFormat : \"yaml\" , Notifiers : [] notifier . Notifier { & webhooknotifier . Notifier { EndpointURL : \" https://example.com/hook\" , Secret : \"Secret\" , Meta : map [ string ] string { \"app.name\" : \"my app\" , }, }, }, DataExporter : ffclient . DataExporter { FlushInterval : 10 * time . Second , MaxEventInMemory : 1000 , Exporter : & file . Exporter { OutputDir : \"/output-data/\" , }, }, StartWithRetrieverError : false , })","title":"Example"},{"location":"configuration/#multiple-configuration-flag-files","text":"go-feature-flag comes ready to use out of the box by calling the Init function and it will be available everywhere. Since most applications will want to use a single central flag configuration, the package provides this. It is similar to a singleton. In all the examples above, they demonstrate using go-feature-flag in its singleton style approach.","title":"Multiple configuration flag files"},{"location":"configuration/#working-with-multiple-go-feature-flag","text":"You can also create many go-feature-flag clients to use in your application. Each will have its own unique set of configurations and flags. Each can read from a different config file and from different places. All the functions that go-feature-flag package supports are mirrored as methods on a GoFeatureFlag .","title":"Working with multiple go-feature-flag"},{"location":"configuration/#example_1","text":"1 2 3 4 5 6 7 8 9 10 11 x , err := ffclient . New ( Config { Retriever : & httpretriever . Retriever {{ URL : \"http://example.com/flag-config.yaml\" ,}}) defer x . Close () y , err := ffclient . New ( Config { Retriever : & httpretriever . Retriever {{ URL : \"http://example.com/test2.yaml\" ,}}) defer y . Close () user := ffuser . NewUser ( \"user-key\" ) x . BoolVariation ( \"test-flag\" , user , false ) y . BoolVariation ( \"test-flag\" , user , false ) // ... When working with multiple GoFeatureFlag , it is up to the user to keep track of the different GoFeatureFlag instances.","title":"Example"},{"location":"configuration/#offline-mode","text":"In some situations, you might want to stop making remote calls and fall back to default values for your feature flags. For example, if your software is both cloud-hosted and distributed to customers to run on-premise, it might make sense to fall back to defaults when running on-premise. You can do this by setting Offline mode in the client's Config.","title":"Offline mode"},{"location":"configuration/#advanced-configuration","text":"Export data from your flag variations Be notified when your flags change","title":"Advanced configuration"},{"location":"faq/","text":"Frequently Asked Questions Why using feature flags? This one of most common question I get. Feature flags are a software development technique that turns certain functionality on and off during runtime, without deploying new code. It allows you to decouple deploy and release , giving you better control and more experimentation over the full lifecycle of features. What is the lifecycle of a flag? The lifecycle of your flags is key if you don't want to have un-used things everywhere in your code. Start by creating the flag in your configuration file (with 0% to avoid affecting your users) . Evaluate the flag in your code (see variation ) . Deploy your application with the variation check. Start rolling out your flag. When 100% of your users have access to the new feature, remove the call to the variation from your code base. Deploy your application without the variation check. Remove the flag from your configuration file. What happen if my configuration file is not reachable/deleted? If while you are on production for some reason your flag file becomes unreachable, we will be able to serve the users based on the last version of the file we were able to read. We will continue to try reading the file based on the pollingInterval you have configured. If you start a new instance, if the file is not reachable to module will fail to initialize except if you have set the option StartWithRetrieverError in the config. With this option, we will serve the SDK default value (the 3rd param in your variation) until the flag becomes available again. What is the best rollout strategy? The lib gives you a lot of strategies to rollout your flags, there is no better one, it always depends on the context of your release. If your release is not critical and, you just want an easy cut-off strategy, you can pass your flag from 0% to 100% for all your users If you are scared that your infrastructure can be impacted by the new feature, a progressive rollout can help you to impact users over time and to be able to check how your system handle it. If you want to impact only a subset of your users, you can put a rule on your flag. Etc ... You have an endless list of rollout strategies depending on what is your feature. How we ensure that users affected by the feature flags are not always the same? To avoid always have the same users affected by a flag, the hash we compute that allows us to determine if the user is part of the percentage is not computed only based on the user key but a combination of the user key and the flag name. It guarantees that the user will be always in the same group but depending on the flag.","title":"Frequently Asked Questions"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#why-using-feature-flags","text":"This one of most common question I get. Feature flags are a software development technique that turns certain functionality on and off during runtime, without deploying new code. It allows you to decouple deploy and release , giving you better control and more experimentation over the full lifecycle of features.","title":"Why using feature flags?"},{"location":"faq/#what-is-the-lifecycle-of-a-flag","text":"The lifecycle of your flags is key if you don't want to have un-used things everywhere in your code. Start by creating the flag in your configuration file (with 0% to avoid affecting your users) . Evaluate the flag in your code (see variation ) . Deploy your application with the variation check. Start rolling out your flag. When 100% of your users have access to the new feature, remove the call to the variation from your code base. Deploy your application without the variation check. Remove the flag from your configuration file.","title":"What is the lifecycle of a flag?"},{"location":"faq/#what-happen-if-my-configuration-file-is-not-reachabledeleted","text":"If while you are on production for some reason your flag file becomes unreachable, we will be able to serve the users based on the last version of the file we were able to read. We will continue to try reading the file based on the pollingInterval you have configured. If you start a new instance, if the file is not reachable to module will fail to initialize except if you have set the option StartWithRetrieverError in the config. With this option, we will serve the SDK default value (the 3rd param in your variation) until the flag becomes available again.","title":"What happen if my configuration file is not reachable/deleted?"},{"location":"faq/#what-is-the-best-rollout-strategy","text":"The lib gives you a lot of strategies to rollout your flags, there is no better one, it always depends on the context of your release. If your release is not critical and, you just want an easy cut-off strategy, you can pass your flag from 0% to 100% for all your users If you are scared that your infrastructure can be impacted by the new feature, a progressive rollout can help you to impact users over time and to be able to check how your system handle it. If you want to impact only a subset of your users, you can put a rule on your flag. Etc ... You have an endless list of rollout strategies depending on what is your feature.","title":"What is the best rollout strategy?"},{"location":"faq/#how-we-ensure-that-users-affected-by-the-feature-flags-are-not-always-the-same","text":"To avoid always have the same users affected by a flag, the hash we compute that allows us to determine if the user is part of the percentage is not computed only based on the user key but a combination of the user key and the flag name. It guarantees that the user will be always in the same group but depending on the flag.","title":"How we ensure that users affected by the feature flags are not always the same?"},{"location":"flag_format/","text":"Configure a flag go-feature-flag core feature is to centralize all your feature flags in a source file, and to avoid hosting and maintaining a backend server to manage them. Your file must be a valid YAML , JSON or TOML file with a list of flags (examples: YAML , JSON , TOML ) . The easiest way to create your configuration file is to used [ GO Feature Flag Editor available at https://editor.gofeatureflag.org . If you prefer to do it manually please follow instruction bellow. Editor Creating the first version of the flag is not always pleasant, that's why we have created GO Feature Flag Editor a simple editor to create your files. Example A flag configuration looks like: YAML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 # This is your configuration for your first flag first-flag : variations : # All possible return value for your feature flag A : false B : true targeting : # If you want to target a subset of your users in particular - query : key eq \"random-key\" percentage : A : 0 B : 100 defaultRule : # When no targeting match we use the defaultRule variation : A # A second example of a flag configuration second-flag : variations : A : \"valueA\" B : \"valueB\" defaultValue : \"a default value\" targeting : - name : legacyRuleV0 query : key eq \"not-a-key\" percentage : A : 10 B : 90 defaultRule : name : legacyDefaultRule variation : defaultValue version : \"12\" experimentation : start : 2021-03-20T00:00:00.1-05:00 end : 2021-03-21T00:00:00.1-05:00 JSON 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 { \"first-flag\" : { \"variations\" : { \"A\" : false , \"B\" : true }, \"targeting\" : [ { \"query\" : \"key eq \\\"random-key\\\"\" , \"percentage\" : { \"A\" : 0 , \"B\" : 100 } } ], \"defaultRule\" : { \"variation\" : \"A\" } }, \"second-flag\" : { \"variations\" : { \"A\" : \"valueA\" , \"B\" : \"valueB\" , \"defaultValue\" : \"a default value\" }, \"targeting\" : [ { \"name\" : \"legacyRuleV0\" , \"query\" : \"key eq \\\"not-a-key\\\"\" , \"percentage\" : { \"A\" : 10 , \"B\" : 90 } } ], \"defaultRule\" : { \"name\" : \"legacyDefaultRule\" , \"variation\" : \"defaultValue\" }, \"version\" : \"12\" , \"experimentation\" : { \"start\" : \"2021-03-20T05:00:00.100Z\" , \"end\" : \"2021-03-21T05:00:00.100Z\" } } } TOML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 [first-flag.variations] A = false B = true [[first-flag.targeting]] query = 'key eq \"random-key\"' [first-flag.targeting.percentage] A = 0 B = 100 [first-flag.defaultRule] variation = \"A\" [second-flag] version = \"12\" [second-flag.variations] A = \"valueA\" B = \"valueB\" defaultValue = \"a default value\" [[second-flag.targeting]] name = \"legacyRuleV0\" query = 'key eq \"not-a-key\"' [second-flag.targeting.percentage] A = 10 B = 90 [second-flag.defaultRule] name = \"legacyDefaultRule\" variation = \"defaultValue\" [second-flag.experimentation] start = 2021-03-20 T05 : 00 : 00.100 Z end = 2021-03-21 T05 : 00 : 00.100 Z Format details Field Description flag-key Name of your flag. It must be unique. On the example the flag keys are test-flag and test-flag2 . variations Variations are all the variations available for this flag. It is represented as a key/value element. The key is the name of the variation and the value could be any types available ( string , float , int , map , array , bool ). You can have as many variation as needed. # Some examples variationString : test variationBool : true variationInt : 1000 variationFloat : 1000.23 variationArray : - item1 - item2 variationObj : item1 : 123 item2 : this is a string item3 : false targeting (optional) Targeting contains the list of rules you have to target a subset of your users. You can have as many target as needed. This field is an array and contains a list of rules. See rules format to have more info on how to write a rule. defaultRule DefaultRule is the rule that is applied if the user does not match in any targeting. See rules format to have more info on how to write a rule. trackEvents (optional) false if you don't want to export the data in your data exporter. Default: true disable (optional) true if the flag is disabled. Default: false version (optional) The version is the version of your flag. This string is used to display the information in the notifiers and data collection, you have to update it your self. Default: \"\" scheduledRollout (optional) Scheduled allow to patch your flag over time. You can add several steps that updates the flag, this is typically used if you want to gradually add more user in your flag. See Scheduled rollout to have more info on how to use it. experimentation (optional) Experimentation allow you to configure a start date and an end date for your flag. When the experimentation is not running, the flag will serve the default value. See Experimentation rollout to have more info on how to use it. Rule format A rule is a configuration that allows to serve a variation based on some conditions. Format details Field Description name (optional) Name of your rule. This is needed when your are updating a rule using a scheduled rollout . query Query represents an antlr query in the nikunjy/rules format. This field is mandatory in every rule used in the targeting field . See query format to have the syntax. Note: if you use the field query in a defaultRule it will be ignored. variation (optional) Name of the variation to return. percentage (optional) Represents the percentage we should give to each variation. percentage : variationA : 10.59 variationB : 9.41 variationC : 80 The format is the name of the variation and the percentage for this one. Note: if your total is not equals to 100% this rule will be considered as invalid. progressiveRollout (optional) Allow to ramp up the percentage of your flag over time. You can decide at which percentage you starts with and at what percentage you ends with in your release ramp. Before the start date we will serve the initial percentage and, after we will serve the end percentage. See progressive rollout to have more info on how to use it. disable (optional) Set to true if you want to disable the rule. Default: true . Info variation , percentage and progressiveRollout are optional but you need to have one of the 3. If you have more than one field we will use the first one in that order progressiveRollout > percentage > variation . Query format The rule format is based on the nikunjy/rules library. All the operations can be written capitalized or lowercase (ex: eq or EQ can be used). Logical Operations supported are AND OR . Compare Expression and their definitions ( a|b means you can use either one of the two a or b ): Operator Description eq , == equals to ne , != not equals to lt , < less than gt , > greater than le , <= less than equal to ge , >= greater than equal to co contains sw starts with ew ends with in in a list pr present not not of a logical expression Examples Select a specific user: key eq \"example@example.com\" Select all identified users: anonymous ne true Select a user with a custom property: userId eq \"12345\" Select on multiple criteria: All users with ids finishing by @test.com that have the role backend engineer in the pro environment for the company go-feature-flag ( key ew \"@test.com\" ) and ( role eq \"backend engineer\" ) and ( env eq \"pro\" ) and ( company eq \"go-feature-flag\" ) ` Environments When you initialise go-feature-flag you can set an environment for the instance of this SDK. 1 2 3 4 5 ffclient . Init ( ffclient . Config { // ... Environment : \"prod\" , // ... }) When an environment is set, it adds a new field in your user called env that you can use in your rules. It means that you can decide to activate a flag only for some environment . Example of rules based on the environment: # Flag activate only in dev rule : env == \"dev\" # Flag used only in dev and staging environment rule : (env == \"dev\") or (env == \"staging\") # Flag used on non prod environments except for the user 1234 in prod rule : (env != \"prod\") or (user_id == 1234) Advanced configurations You can have advanced configurations for your flag to have specific behavior for them, such as: Specific rollout strategies Don't track a flag","title":"Configure a flag"},{"location":"flag_format/#configure-a-flag","text":"go-feature-flag core feature is to centralize all your feature flags in a source file, and to avoid hosting and maintaining a backend server to manage them. Your file must be a valid YAML , JSON or TOML file with a list of flags (examples: YAML , JSON , TOML ) . The easiest way to create your configuration file is to used [ GO Feature Flag Editor available at https://editor.gofeatureflag.org . If you prefer to do it manually please follow instruction bellow.","title":"Configure a flag"},{"location":"flag_format/#editor","text":"Creating the first version of the flag is not always pleasant, that's why we have created GO Feature Flag Editor a simple editor to create your files.","title":"Editor"},{"location":"flag_format/#example","text":"A flag configuration looks like: YAML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 # This is your configuration for your first flag first-flag : variations : # All possible return value for your feature flag A : false B : true targeting : # If you want to target a subset of your users in particular - query : key eq \"random-key\" percentage : A : 0 B : 100 defaultRule : # When no targeting match we use the defaultRule variation : A # A second example of a flag configuration second-flag : variations : A : \"valueA\" B : \"valueB\" defaultValue : \"a default value\" targeting : - name : legacyRuleV0 query : key eq \"not-a-key\" percentage : A : 10 B : 90 defaultRule : name : legacyDefaultRule variation : defaultValue version : \"12\" experimentation : start : 2021-03-20T00:00:00.1-05:00 end : 2021-03-21T00:00:00.1-05:00 JSON 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 { \"first-flag\" : { \"variations\" : { \"A\" : false , \"B\" : true }, \"targeting\" : [ { \"query\" : \"key eq \\\"random-key\\\"\" , \"percentage\" : { \"A\" : 0 , \"B\" : 100 } } ], \"defaultRule\" : { \"variation\" : \"A\" } }, \"second-flag\" : { \"variations\" : { \"A\" : \"valueA\" , \"B\" : \"valueB\" , \"defaultValue\" : \"a default value\" }, \"targeting\" : [ { \"name\" : \"legacyRuleV0\" , \"query\" : \"key eq \\\"not-a-key\\\"\" , \"percentage\" : { \"A\" : 10 , \"B\" : 90 } } ], \"defaultRule\" : { \"name\" : \"legacyDefaultRule\" , \"variation\" : \"defaultValue\" }, \"version\" : \"12\" , \"experimentation\" : { \"start\" : \"2021-03-20T05:00:00.100Z\" , \"end\" : \"2021-03-21T05:00:00.100Z\" } } } TOML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 [first-flag.variations] A = false B = true [[first-flag.targeting]] query = 'key eq \"random-key\"' [first-flag.targeting.percentage] A = 0 B = 100 [first-flag.defaultRule] variation = \"A\" [second-flag] version = \"12\" [second-flag.variations] A = \"valueA\" B = \"valueB\" defaultValue = \"a default value\" [[second-flag.targeting]] name = \"legacyRuleV0\" query = 'key eq \"not-a-key\"' [second-flag.targeting.percentage] A = 10 B = 90 [second-flag.defaultRule] name = \"legacyDefaultRule\" variation = \"defaultValue\" [second-flag.experimentation] start = 2021-03-20 T05 : 00 : 00.100 Z end = 2021-03-21 T05 : 00 : 00.100 Z","title":"Example"},{"location":"flag_format/#format-details","text":"Field Description flag-key Name of your flag. It must be unique. On the example the flag keys are test-flag and test-flag2 . variations Variations are all the variations available for this flag. It is represented as a key/value element. The key is the name of the variation and the value could be any types available ( string , float , int , map , array , bool ). You can have as many variation as needed. # Some examples variationString : test variationBool : true variationInt : 1000 variationFloat : 1000.23 variationArray : - item1 - item2 variationObj : item1 : 123 item2 : this is a string item3 : false targeting (optional) Targeting contains the list of rules you have to target a subset of your users. You can have as many target as needed. This field is an array and contains a list of rules. See rules format to have more info on how to write a rule. defaultRule DefaultRule is the rule that is applied if the user does not match in any targeting. See rules format to have more info on how to write a rule. trackEvents (optional) false if you don't want to export the data in your data exporter. Default: true disable (optional) true if the flag is disabled. Default: false version (optional) The version is the version of your flag. This string is used to display the information in the notifiers and data collection, you have to update it your self. Default: \"\" scheduledRollout (optional) Scheduled allow to patch your flag over time. You can add several steps that updates the flag, this is typically used if you want to gradually add more user in your flag. See Scheduled rollout to have more info on how to use it. experimentation (optional) Experimentation allow you to configure a start date and an end date for your flag. When the experimentation is not running, the flag will serve the default value. See Experimentation rollout to have more info on how to use it.","title":"Format details"},{"location":"flag_format/#rule-format","text":"A rule is a configuration that allows to serve a variation based on some conditions.","title":"Rule format"},{"location":"flag_format/#format-details_1","text":"Field Description name (optional) Name of your rule. This is needed when your are updating a rule using a scheduled rollout . query Query represents an antlr query in the nikunjy/rules format. This field is mandatory in every rule used in the targeting field . See query format to have the syntax. Note: if you use the field query in a defaultRule it will be ignored. variation (optional) Name of the variation to return. percentage (optional) Represents the percentage we should give to each variation. percentage : variationA : 10.59 variationB : 9.41 variationC : 80 The format is the name of the variation and the percentage for this one. Note: if your total is not equals to 100% this rule will be considered as invalid. progressiveRollout (optional) Allow to ramp up the percentage of your flag over time. You can decide at which percentage you starts with and at what percentage you ends with in your release ramp. Before the start date we will serve the initial percentage and, after we will serve the end percentage. See progressive rollout to have more info on how to use it. disable (optional) Set to true if you want to disable the rule. Default: true . Info variation , percentage and progressiveRollout are optional but you need to have one of the 3. If you have more than one field we will use the first one in that order progressiveRollout > percentage > variation .","title":"Format details"},{"location":"flag_format/#query-format","text":"The rule format is based on the nikunjy/rules library. All the operations can be written capitalized or lowercase (ex: eq or EQ can be used). Logical Operations supported are AND OR . Compare Expression and their definitions ( a|b means you can use either one of the two a or b ): Operator Description eq , == equals to ne , != not equals to lt , < less than gt , > greater than le , <= less than equal to ge , >= greater than equal to co contains sw starts with ew ends with in in a list pr present not not of a logical expression","title":"Query format"},{"location":"flag_format/#examples","text":"Select a specific user: key eq \"example@example.com\" Select all identified users: anonymous ne true Select a user with a custom property: userId eq \"12345\" Select on multiple criteria: All users with ids finishing by @test.com that have the role backend engineer in the pro environment for the company go-feature-flag ( key ew \"@test.com\" ) and ( role eq \"backend engineer\" ) and ( env eq \"pro\" ) and ( company eq \"go-feature-flag\" ) `","title":"Examples"},{"location":"flag_format/#environments","text":"When you initialise go-feature-flag you can set an environment for the instance of this SDK. 1 2 3 4 5 ffclient . Init ( ffclient . Config { // ... Environment : \"prod\" , // ... }) When an environment is set, it adds a new field in your user called env that you can use in your rules. It means that you can decide to activate a flag only for some environment . Example of rules based on the environment: # Flag activate only in dev rule : env == \"dev\" # Flag used only in dev and staging environment rule : (env == \"dev\") or (env == \"staging\") # Flag used on non prod environments except for the user 1234 in prod rule : (env != \"prod\") or (user_id == 1234)","title":"Environments"},{"location":"flag_format/#advanced-configurations","text":"You can have advanced configurations for your flag to have specific behavior for them, such as: Specific rollout strategies Don't track a flag","title":"Advanced configurations"},{"location":"quickstart/","text":"Getting started Installation go get github.com/thomaspoignant/go-feature-flag SDK Initialisation First, you need to initialize the ffclient with the location of your backend file. 1 2 3 4 5 6 7 err := ffclient . Init ( ffclient . Config { PollingInterval : 3 * time . Second , Retriever : & httpretriever . Retriever { URL : \"http://example.com/flag-config.yaml\" , }, }) defer ffclient . Close () This example will load a file from an HTTP endpoint and will refresh the flags every 3 seconds (if you omit the PollingInterval, the default value is 60 seconds). Evaluate your flags Now you can evaluate your flags anywhere in your code. 1 2 3 4 5 6 7 user := ffuser . NewUser ( \"user-unique-key\" ) hasFlag , _ := ffclient . BoolVariation ( \"test-flag\" , user , false ) if hasFlag { // flag \"test-flag\" is true for the user } else { // flag \"test-flag\" is false for the user } You can find more examples in the examples/ directory.","title":"Getting started"},{"location":"quickstart/#getting-started","text":"","title":"Getting started"},{"location":"quickstart/#installation","text":"go get github.com/thomaspoignant/go-feature-flag","title":"Installation"},{"location":"quickstart/#sdk-initialisation","text":"First, you need to initialize the ffclient with the location of your backend file. 1 2 3 4 5 6 7 err := ffclient . Init ( ffclient . Config { PollingInterval : 3 * time . Second , Retriever : & httpretriever . Retriever { URL : \"http://example.com/flag-config.yaml\" , }, }) defer ffclient . Close () This example will load a file from an HTTP endpoint and will refresh the flags every 3 seconds (if you omit the PollingInterval, the default value is 60 seconds).","title":"SDK Initialisation"},{"location":"quickstart/#evaluate-your-flags","text":"Now you can evaluate your flags anywhere in your code. 1 2 3 4 5 6 7 user := ffuser . NewUser ( \"user-unique-key\" ) hasFlag , _ := ffclient . BoolVariation ( \"test-flag\" , user , false ) if hasFlag { // flag \"test-flag\" is true for the user } else { // flag \"test-flag\" is false for the user } You can find more examples in the examples/ directory.","title":"Evaluate your flags"},{"location":"users/","text":"Targeting users with flags Users Feature flag targeting and rollouts are all determined by the user you pass to your Variation calls. The SDK defines a User struct and a UserBuilder to make this easy. Here's an example: 1 2 3 4 5 6 7 8 9 // User with only a key user1 := ffuser . NewUser ( \"user1-key\" ) // User with a key plus other attributes user2 = ffuser . NewUserBuilder ( \"user2-key\" ). AddCustom ( \"firstname\" , \"John\" ). AddCustom ( \"lastname\" , \"Doe\" ). AddCustom ( \"email\" , \"john.doe@example.com\" ). Build () The most common attribute is the user's key and this is the only mandatory user attribute. The key should also uniquely identify each user. You can use a primary key, an e-mail address, or a hash, as long as the same user always has the same key. We recommend using a hash if possible. All the other attributes are optional. Info Custom attributes are one of the most powerful features. They let you have rules on these attributes and target users according to any data that you want. Anonymous users You can also distinguish logged-in users from anonymous users in the SDK, as follows: 1 2 3 4 5 6 7 8 9 10 // User with only a key user1 := ffuser . NewAnonymousUser ( \"user1-key\" ) // User with a key plus other attributes user2 = ffuser . NewUserBuilder ( \"user2-key\" ). Anonymous ( true ). AddCustom ( \"firstname\" , \"John\" ). AddCustom ( \"lastname\" , \"Doe\" ). AddCustom ( \"email\" , \"john.doe@example.com\" ). Build () You will still need to generate a unique key for anonymous users. Session IDs or UUIDs work best for this. Anonymous users work just like regular users, this information just helps you to add a rule to target a specific population. Variation The Variation methods determine whether a flag is enabled or not for a specific user. There is a Variation method for each type: BoolVariation , IntVariation , Float64Variation , StringVariation , JSONArrayVariation , JSONVariation 1 2 3 4 result , _ := ffclient . BoolVariation ( \"your.feature.key\" , user , false ) // result is now true or false depending on the setting of // this boolean feature flag Variation methods take the feature flag key , a user , and a default value . The default value is return when an error is encountered ( ffclient not initialized, variation with wrong type, flag does not exist ...). In the example, if the flag your.feature.key does not exists, result will be false . Not that you will always have a usable value in the result. Get all flags for a specific user If you want to send the information about a specific user to a front-end, you will want a snapshot of all the flags for this user at a specific time. The method ffclient.AllFlagsState returns a snapshot of flag values and metadata. The function is evaluating all available flags for the user and return a flagstate.AllFlagsState object containing the information you need. 1 2 3 4 5 6 user := ffuser . NewUser ( \"example\" ) // AllFlagsState will give you the value for all the flags available. allFlagsState := ffclient . AllFlagsState ( u ) // If you want to send it to a front-end you can Marshal it by calling MarshalJSON() forFE , err := allFlagsState . MarshalJSON () The MarshalJSON() function will return something like bellow, that can be directly used by your front-end application. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 { \"flags\" : { \"test-flag0\" : { \"value\" : true , \"timestamp\" : 1622209328 , \"variationType\" : \"True\" , \"trackEvents\" : true }, \"test-flag1\" : { \"value\" : \"true\" , \"timestamp\" : 1622209328 , \"variationType\" : \"True\" , \"trackEvents\" : true }, \"test-flag2\" : { \"value\" : 1 , \"timestamp\" : 1622209328 , \"variationType\" : \"True\" , \"trackEvents\" : true }, \"test-flag3\" : { \"value\" : [ \"yo\" , \"ya\" ], \"timestamp\" : 1622209328 , \"variationType\" : \"True\" , \"trackEvents\" : true }, \"test-flag4\" : { \"value\" : { \"test\" : \"yo\" }, \"timestamp\" : 1622209328 , \"variationType\" : \"True\" , \"trackEvents\" : true }, \"test-flag5\" : { \"value\" : 1.1 , \"timestamp\" : 1622209328 , \"variationType\" : \"True\" , \"trackEvents\" : false } }, \"valid\" : true } Warning There is no tracking done when evaluating all the flag at once.","title":"Targeting users with flags"},{"location":"users/#targeting-users-with-flags","text":"","title":"Targeting users with flags"},{"location":"users/#users","text":"Feature flag targeting and rollouts are all determined by the user you pass to your Variation calls. The SDK defines a User struct and a UserBuilder to make this easy. Here's an example: 1 2 3 4 5 6 7 8 9 // User with only a key user1 := ffuser . NewUser ( \"user1-key\" ) // User with a key plus other attributes user2 = ffuser . NewUserBuilder ( \"user2-key\" ). AddCustom ( \"firstname\" , \"John\" ). AddCustom ( \"lastname\" , \"Doe\" ). AddCustom ( \"email\" , \"john.doe@example.com\" ). Build () The most common attribute is the user's key and this is the only mandatory user attribute. The key should also uniquely identify each user. You can use a primary key, an e-mail address, or a hash, as long as the same user always has the same key. We recommend using a hash if possible. All the other attributes are optional. Info Custom attributes are one of the most powerful features. They let you have rules on these attributes and target users according to any data that you want.","title":"Users"},{"location":"users/#anonymous-users","text":"You can also distinguish logged-in users from anonymous users in the SDK, as follows: 1 2 3 4 5 6 7 8 9 10 // User with only a key user1 := ffuser . NewAnonymousUser ( \"user1-key\" ) // User with a key plus other attributes user2 = ffuser . NewUserBuilder ( \"user2-key\" ). Anonymous ( true ). AddCustom ( \"firstname\" , \"John\" ). AddCustom ( \"lastname\" , \"Doe\" ). AddCustom ( \"email\" , \"john.doe@example.com\" ). Build () You will still need to generate a unique key for anonymous users. Session IDs or UUIDs work best for this. Anonymous users work just like regular users, this information just helps you to add a rule to target a specific population.","title":"Anonymous users"},{"location":"users/#variation","text":"The Variation methods determine whether a flag is enabled or not for a specific user. There is a Variation method for each type: BoolVariation , IntVariation , Float64Variation , StringVariation , JSONArrayVariation , JSONVariation 1 2 3 4 result , _ := ffclient . BoolVariation ( \"your.feature.key\" , user , false ) // result is now true or false depending on the setting of // this boolean feature flag Variation methods take the feature flag key , a user , and a default value . The default value is return when an error is encountered ( ffclient not initialized, variation with wrong type, flag does not exist ...). In the example, if the flag your.feature.key does not exists, result will be false . Not that you will always have a usable value in the result.","title":"Variation"},{"location":"users/#get-all-flags-for-a-specific-user","text":"If you want to send the information about a specific user to a front-end, you will want a snapshot of all the flags for this user at a specific time. The method ffclient.AllFlagsState returns a snapshot of flag values and metadata. The function is evaluating all available flags for the user and return a flagstate.AllFlagsState object containing the information you need. 1 2 3 4 5 6 user := ffuser . NewUser ( \"example\" ) // AllFlagsState will give you the value for all the flags available. allFlagsState := ffclient . AllFlagsState ( u ) // If you want to send it to a front-end you can Marshal it by calling MarshalJSON() forFE , err := allFlagsState . MarshalJSON () The MarshalJSON() function will return something like bellow, that can be directly used by your front-end application. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 { \"flags\" : { \"test-flag0\" : { \"value\" : true , \"timestamp\" : 1622209328 , \"variationType\" : \"True\" , \"trackEvents\" : true }, \"test-flag1\" : { \"value\" : \"true\" , \"timestamp\" : 1622209328 , \"variationType\" : \"True\" , \"trackEvents\" : true }, \"test-flag2\" : { \"value\" : 1 , \"timestamp\" : 1622209328 , \"variationType\" : \"True\" , \"trackEvents\" : true }, \"test-flag3\" : { \"value\" : [ \"yo\" , \"ya\" ], \"timestamp\" : 1622209328 , \"variationType\" : \"True\" , \"trackEvents\" : true }, \"test-flag4\" : { \"value\" : { \"test\" : \"yo\" }, \"timestamp\" : 1622209328 , \"variationType\" : \"True\" , \"trackEvents\" : true }, \"test-flag5\" : { \"value\" : 1.1 , \"timestamp\" : 1622209328 , \"variationType\" : \"True\" , \"trackEvents\" : false } }, \"valid\" : true } Warning There is no tracking done when evaluating all the flag at once.","title":"Get all flags for a specific user"},{"location":"data_collection/","text":"Export data If you want to export data about how your flag are used, you can use the DataExporter . It collects all the variations events and can save these events on several locations: File - create local files with the variation usages. Log - use your logger to write the variation usages. S3 - export your variation usages to S3. Webhook - export your variation usages by calling a webhook. Google Cloud Storage - export your variation usages by calling a webhook. If the existing exporter does not work with your system you can extend the system and use a custom exporter . Data format Currently, we are supporting only feature events. It represents individual flag evaluations and are considered \"full fidelity\" events. Example 1 2 3 4 5 6 7 8 9 10 { \"kind\" : \"feature\" , \"contextKind\" : \"anonymousUser\" , \"userKey\" : \"ABCD\" , \"creationDate\" : 1618228297 , \"key\" : \"test-flag\" , \"variation\" : \"Default\" , \"value\" : false , \"default\" : false } Configuration fields Field Description kind The kind for a feature event is feature. A feature event will only be generated if the trackEvents attribute of the flag is set to true. contextKind The kind of context which generated an event. This will only be \" anonymousUser \" for events generated on behalf of an anonymous user or the reserved word \" user \" for events generated on behalf of a non-anonymous user userKey The key of the user object used in a feature flag evaluation. creationDate When the feature flag was requested at Unix epoch time in milliseconds. key The key of the feature flag requested. variation The variation of the flag requested. Available values are: True : if the flag was evaluated to True False : if the flag was evaluated to False Dafault : if the flag was evaluated to Default SdkDefault : if something wrong happened and the SDK default value was used. value The value of the feature flag returned by feature flag evaluation. default (Optional) This value is set to true if feature flag evaluation failed, in which case the value returned was the default value passed to variation. Events are collected and send in bulk to avoid spamming your exporter (see details in how to configure data export ) How to configure data export? In your ffclient.Config add the DataExporter field and configure your export location. To avoid spamming your location everytime you have a variation called, go-feature-flag is storing in memory all the events and send them in bulk to the exporter. You can decide the threshold on when to send the data with the properties FlushInterval and MaxEventInMemory . The first threshold hit will export the data. If there are some flags you don't want to export, you can use trackEvents fields on these specific flags to disable the data export (see flag file format ) . Example 1 2 3 4 5 6 7 8 9 10 11 ffclient . Config { // ... DataExporter : ffclient . DataExporter { FlushInterval : 10 * time . Second , MaxEventInMemory : 1000 , Exporter : & fileexporter . Exporter { OutputDir : \"/output-data/\" , }, }, // ... } Configuration fields Field Description Exporter The configuration of the exporter you want to use. All the exporters are available in the exporter package. FlushInterval (optional) Time to wait before exporting the data. Default: 60 seconds . MaxEventInMemory (optional) If MaxEventInMemory is reach before the FlushInterval a intermediary export will be done Default: 100000 . Don't track a flag By default, all flags are trackable, and their data are exported. If you want to exclude a specific flag from the data export, you can set the property trackEvents to false on your flag, and you will have no export for it. YAML 1 2 3 4 5 6 7 8 9 untracked-flag : variations : A : false B : true defaultRule : percentage : A : 0 B : 100 trackEvents : false # Deactivate tracking JSON 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"untracked-flag\" : { \"variations\" : { \"A\" : false , \"B\" : true }, \"defaultRule\" : { \"percentage\" : { \"A\" : 0 , \"B\" : 100 } }, \"trackEvents\" : false } } TOML 1 2 3 4 5 6 7 8 9 10 [untracked-flag] trackEvents = false [untracked-flag.variations] A = false B = true [untracked-flag.defaultRule.percentage] A = 0 B = 100","title":"Export data"},{"location":"data_collection/#export-data","text":"If you want to export data about how your flag are used, you can use the DataExporter . It collects all the variations events and can save these events on several locations: File - create local files with the variation usages. Log - use your logger to write the variation usages. S3 - export your variation usages to S3. Webhook - export your variation usages by calling a webhook. Google Cloud Storage - export your variation usages by calling a webhook. If the existing exporter does not work with your system you can extend the system and use a custom exporter .","title":"Export data"},{"location":"data_collection/#data-format","text":"Currently, we are supporting only feature events. It represents individual flag evaluations and are considered \"full fidelity\" events.","title":"Data format"},{"location":"data_collection/#example","text":"1 2 3 4 5 6 7 8 9 10 { \"kind\" : \"feature\" , \"contextKind\" : \"anonymousUser\" , \"userKey\" : \"ABCD\" , \"creationDate\" : 1618228297 , \"key\" : \"test-flag\" , \"variation\" : \"Default\" , \"value\" : false , \"default\" : false }","title":"Example"},{"location":"data_collection/#configuration-fields","text":"Field Description kind The kind for a feature event is feature. A feature event will only be generated if the trackEvents attribute of the flag is set to true. contextKind The kind of context which generated an event. This will only be \" anonymousUser \" for events generated on behalf of an anonymous user or the reserved word \" user \" for events generated on behalf of a non-anonymous user userKey The key of the user object used in a feature flag evaluation. creationDate When the feature flag was requested at Unix epoch time in milliseconds. key The key of the feature flag requested. variation The variation of the flag requested. Available values are: True : if the flag was evaluated to True False : if the flag was evaluated to False Dafault : if the flag was evaluated to Default SdkDefault : if something wrong happened and the SDK default value was used. value The value of the feature flag returned by feature flag evaluation. default (Optional) This value is set to true if feature flag evaluation failed, in which case the value returned was the default value passed to variation. Events are collected and send in bulk to avoid spamming your exporter (see details in how to configure data export )","title":"Configuration fields"},{"location":"data_collection/#how-to-configure-data-export","text":"In your ffclient.Config add the DataExporter field and configure your export location. To avoid spamming your location everytime you have a variation called, go-feature-flag is storing in memory all the events and send them in bulk to the exporter. You can decide the threshold on when to send the data with the properties FlushInterval and MaxEventInMemory . The first threshold hit will export the data. If there are some flags you don't want to export, you can use trackEvents fields on these specific flags to disable the data export (see flag file format ) .","title":"How to configure data export?"},{"location":"data_collection/#example_1","text":"1 2 3 4 5 6 7 8 9 10 11 ffclient . Config { // ... DataExporter : ffclient . DataExporter { FlushInterval : 10 * time . Second , MaxEventInMemory : 1000 , Exporter : & fileexporter . Exporter { OutputDir : \"/output-data/\" , }, }, // ... }","title":"Example"},{"location":"data_collection/#configuration-fields_1","text":"Field Description Exporter The configuration of the exporter you want to use. All the exporters are available in the exporter package. FlushInterval (optional) Time to wait before exporting the data. Default: 60 seconds . MaxEventInMemory (optional) If MaxEventInMemory is reach before the FlushInterval a intermediary export will be done Default: 100000 .","title":"Configuration fields"},{"location":"data_collection/#dont-track-a-flag","text":"By default, all flags are trackable, and their data are exported. If you want to exclude a specific flag from the data export, you can set the property trackEvents to false on your flag, and you will have no export for it. YAML 1 2 3 4 5 6 7 8 9 untracked-flag : variations : A : false B : true defaultRule : percentage : A : 0 B : 100 trackEvents : false # Deactivate tracking JSON 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"untracked-flag\" : { \"variations\" : { \"A\" : false , \"B\" : true }, \"defaultRule\" : { \"percentage\" : { \"A\" : 0 , \"B\" : 100 } }, \"trackEvents\" : false } } TOML 1 2 3 4 5 6 7 8 9 10 [untracked-flag] trackEvents = false [untracked-flag.variations] A = false B = true [untracked-flag.defaultRule.percentage] A = 0 B = 100","title":"Don't track a flag"},{"location":"data_collection/custom/","text":"Custom exporter To create a custom exporter you must have a struct that implements the exporter.Exporter interface. 1 2 3 4 5 6 7 8 type Exporter interface { // Export will send the data to the exporter. Export ( context . Context , * log . Logger , [] exporter . FeatureEvent ) error // IsBulk return false if we should directly send the data as soon as it is produce // and true if we collect the data to send them in bulk. IsBulk () bool } Export is called asynchronously with a list of exporter.FeatureEvent that have been collected. It is your responsibility to store them where you want. IsBulk function should return false if the exporter can handle the results in stream mode. If you decide to manage it in streaming mode, everytime we call a variation the Export function will be called with only on event in the list.","title":"Custom exporter"},{"location":"data_collection/custom/#custom-exporter","text":"To create a custom exporter you must have a struct that implements the exporter.Exporter interface. 1 2 3 4 5 6 7 8 type Exporter interface { // Export will send the data to the exporter. Export ( context . Context , * log . Logger , [] exporter . FeatureEvent ) error // IsBulk return false if we should directly send the data as soon as it is produce // and true if we collect the data to send them in bulk. IsBulk () bool } Export is called asynchronously with a list of exporter.FeatureEvent that have been collected. It is your responsibility to store them where you want. IsBulk function should return false if the exporter can handle the results in stream mode. If you decide to manage it in streaming mode, everytime we call a variation the Export function will be called with only on event in the list.","title":"Custom exporter"},{"location":"data_collection/file/","text":"File Exporter The file exporter will collect the data and create a new file in a specific folder everytime we send the data. This file should be in the local instance. Check this complete example to see how to export the data in a file. Configuration example 1 2 3 4 5 6 7 8 9 10 11 12 13 ffclient . Config { // ... DataExporter : ffclient . DataExporter { // ... Exporter : & fileexporter . Exporter { OutputDir : \"/output-data/\" , Format : \"csv\" , FileName : \"flag-variation-{{ .Hostname}}-{{ .Timestamp}}.{{ .Format}}\" , CsvTemplate : \"{{ .Kind}};{{ .ContextKind}};{{ .UserKey}};{{ .CreationDate}};{{ .Key}};{{ .Variation}};{{ .Value}};{{ .Default}}\\n\" }, }, // ... } Configuration fields Field Description OutputDir OutputDir is the location of the directory where to store the exported files. It should finish with a / . Format (Optional) Format is the output format you want in your exported file. Available format: JSON , CSV . Default: JSON Filename (Optional) Filename is the name of your output file. You can use a templated config to define the name of your exported files. Available replacement are {{ .Hostname}} , {{ .Timestamp}} and {{ .Format}} Default: flag-variation-{{ .Hostname}}-{{ .Timestamp}}.{{ .Format}} CsvTemplate (Optional) CsvTemplate is used if your output format is CSV. This field will be ignored if you are using another format than CSV. You can decide which fields you want in your CSV line with a go-template syntax, please check internal/exporter/feature_event.go to see what are the fields available. Default: {{ .Kind}};{{ .ContextKind}};{{ .UserKey}};{{ .CreationDate}};{{ .Key}};{{ .Variation}};{{ .Value}};{{ .Default}}\\n Check the godoc for full details .","title":"File Exporter"},{"location":"data_collection/file/#file-exporter","text":"The file exporter will collect the data and create a new file in a specific folder everytime we send the data. This file should be in the local instance. Check this complete example to see how to export the data in a file.","title":"File Exporter"},{"location":"data_collection/file/#configuration-example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 ffclient . Config { // ... DataExporter : ffclient . DataExporter { // ... Exporter : & fileexporter . Exporter { OutputDir : \"/output-data/\" , Format : \"csv\" , FileName : \"flag-variation-{{ .Hostname}}-{{ .Timestamp}}.{{ .Format}}\" , CsvTemplate : \"{{ .Kind}};{{ .ContextKind}};{{ .UserKey}};{{ .CreationDate}};{{ .Key}};{{ .Variation}};{{ .Value}};{{ .Default}}\\n\" }, }, // ... }","title":"Configuration example"},{"location":"data_collection/file/#configuration-fields","text":"Field Description OutputDir OutputDir is the location of the directory where to store the exported files. It should finish with a / . Format (Optional) Format is the output format you want in your exported file. Available format: JSON , CSV . Default: JSON Filename (Optional) Filename is the name of your output file. You can use a templated config to define the name of your exported files. Available replacement are {{ .Hostname}} , {{ .Timestamp}} and {{ .Format}} Default: flag-variation-{{ .Hostname}}-{{ .Timestamp}}.{{ .Format}} CsvTemplate (Optional) CsvTemplate is used if your output format is CSV. This field will be ignored if you are using another format than CSV. You can decide which fields you want in your CSV line with a go-template syntax, please check internal/exporter/feature_event.go to see what are the fields available. Default: {{ .Kind}};{{ .ContextKind}};{{ .UserKey}};{{ .CreationDate}};{{ .Key}};{{ .Variation}};{{ .Value}};{{ .Default}}\\n Check the godoc for full details .","title":"Configuration fields"},{"location":"data_collection/google_cloud_storage/","text":"Google Cloud Storage Exporter The Google Cloud Storage exporter will collect the data and create a new file in a specific folder everytime we send the data. Everytime the FlushInterval or MaxEventInMemory is reached a new file will be added to S3. Info If for some reason the Google Cloud Storage upload failed, we will keep the data in memory and retry to add the next time we reach FlushInterval or MaxEventInMemory . Check this complete example to see how to export the data in S3. Configuration example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ffclient . Config { // ... DataExporter : ffclient . DataExporter { // ... Exporter : & gcstorageexporter . Exporter { Bucket : \"test-goff\" , Format : \"json\" , Path : \"yourPath\" , Filename : \"flag-variation-{{ .Timestamp}}.{{ .Format}}\" , Options : [] option . ClientOption {}, // Your google cloud SDK options }, }, // ... } Configuration fields Field Description Bucket Name of your Google Cloud Storage Bucket. CsvTemplate (optional) CsvTemplate is used if your output format is CSV. This field will be ignored if you are using another format than CSV. You can decide which fields you want in your CSV line with a go-template syntax, please check internal/exporter/feature_event.go to see what are the fields available. Default: {{ .Kind}};{{ .ContextKind}};{{ .UserKey}};{{ .CreationDate}};{{ .Key}};{{ .Variation}};{{ .Value}};{{ .Default}}\\n Filename (optional) Filename is the name of your output file. You can use a templated config to define the name of your exported files. Available replacement are {{ .Hostname}} , {{ .Timestamp} } and {{ .Format}} Default: flag-variation-{{ .Hostname}}-{{ .Timestamp}}.{{ .Format}} Format (optional) Format is the output format you want in your exported file. Available format are JSON and CSV . (Default: JSON ) Options (optional) An instance of option.ClientOption that configures your access to Google Cloud. Check this documentation for more info . Path (optional) The location of the directory in your bucket. Check the godoc for full details .","title":"Google Cloud Storage Exporter"},{"location":"data_collection/google_cloud_storage/#google-cloud-storage-exporter","text":"The Google Cloud Storage exporter will collect the data and create a new file in a specific folder everytime we send the data. Everytime the FlushInterval or MaxEventInMemory is reached a new file will be added to S3. Info If for some reason the Google Cloud Storage upload failed, we will keep the data in memory and retry to add the next time we reach FlushInterval or MaxEventInMemory . Check this complete example to see how to export the data in S3.","title":"Google Cloud Storage Exporter"},{"location":"data_collection/google_cloud_storage/#configuration-example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 ffclient . Config { // ... DataExporter : ffclient . DataExporter { // ... Exporter : & gcstorageexporter . Exporter { Bucket : \"test-goff\" , Format : \"json\" , Path : \"yourPath\" , Filename : \"flag-variation-{{ .Timestamp}}.{{ .Format}}\" , Options : [] option . ClientOption {}, // Your google cloud SDK options }, }, // ... }","title":"Configuration example"},{"location":"data_collection/google_cloud_storage/#configuration-fields","text":"Field Description Bucket Name of your Google Cloud Storage Bucket. CsvTemplate (optional) CsvTemplate is used if your output format is CSV. This field will be ignored if you are using another format than CSV. You can decide which fields you want in your CSV line with a go-template syntax, please check internal/exporter/feature_event.go to see what are the fields available. Default: {{ .Kind}};{{ .ContextKind}};{{ .UserKey}};{{ .CreationDate}};{{ .Key}};{{ .Variation}};{{ .Value}};{{ .Default}}\\n Filename (optional) Filename is the name of your output file. You can use a templated config to define the name of your exported files. Available replacement are {{ .Hostname}} , {{ .Timestamp} } and {{ .Format}} Default: flag-variation-{{ .Hostname}}-{{ .Timestamp}}.{{ .Format}} Format (optional) Format is the output format you want in your exported file. Available format are JSON and CSV . (Default: JSON ) Options (optional) An instance of option.ClientOption that configures your access to Google Cloud. Check this documentation for more info . Path (optional) The location of the directory in your bucket. Check the godoc for full details .","title":"Configuration fields"},{"location":"data_collection/log/","text":"Log Exporter The log exporter is here mostly for backward compatibility (originally every variation were logged, but it can be a lot of data for a default configuration) . It will use your logger ffclient.Config.Logger to log every variation changes. You can configure your output log with the Format field. It uses a go template format. Configuration example 1 2 3 4 5 6 7 8 9 ffclient . Config { // ... DataExporter : ffclient . DataExporter { Exporter : & logsexporter . Exporter { LogFormat : \"[{{ .FormattedDate}}] user=\\\"{{ .UserKey}}\\\", flag=\\\"{{ .Key}}\\\", value=\\\"{{ .Value}}\\\"\" , }, }, // ... } Configuration fields Field Description LogFormat (optional) LogFormat is the template configuration of the output format of your log. You can use all the key from the exporter.FeatureEvent + a key called FormattedDate that represent the date with the RFC 3339 Format. Default: [{{ .FormattedDate}}] user=\"{{ .UserKey}}\", flag=\"{{ .Key}}\", value=\"{{ .Value}}\" Check the godoc for full details .","title":"Log Exporter"},{"location":"data_collection/log/#log-exporter","text":"The log exporter is here mostly for backward compatibility (originally every variation were logged, but it can be a lot of data for a default configuration) . It will use your logger ffclient.Config.Logger to log every variation changes. You can configure your output log with the Format field. It uses a go template format.","title":"Log Exporter"},{"location":"data_collection/log/#configuration-example","text":"1 2 3 4 5 6 7 8 9 ffclient . Config { // ... DataExporter : ffclient . DataExporter { Exporter : & logsexporter . Exporter { LogFormat : \"[{{ .FormattedDate}}] user=\\\"{{ .UserKey}}\\\", flag=\\\"{{ .Key}}\\\", value=\\\"{{ .Value}}\\\"\" , }, }, // ... }","title":"Configuration example"},{"location":"data_collection/log/#configuration-fields","text":"Field Description LogFormat (optional) LogFormat is the template configuration of the output format of your log. You can use all the key from the exporter.FeatureEvent + a key called FormattedDate that represent the date with the RFC 3339 Format. Default: [{{ .FormattedDate}}] user=\"{{ .UserKey}}\", flag=\"{{ .Key}}\", value=\"{{ .Value}}\" Check the godoc for full details .","title":"Configuration fields"},{"location":"data_collection/s3/","text":"S3 Exporter The S3 exporter will collect the data and create a new file in a specific folder everytime we send the data. Everytime the FlushInterval or MaxEventInMemory is reached a new file will be added to S3. Info If for some reason the S3 upload failed, we will keep the data in memory and retry to add the next time we reach FlushInterval or MaxEventInMemory . Check this complete example to see how to export the data in S3. Configuration example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ffclient . Config { // ... DataExporter : ffclient . DataExporter { // ... Exporter : & s3exporter . Exporter { Format : \"csv\" , FileName : \"flag-variation-{{ .Hostname}}-{{ .Timestamp}}.{{ .Format}}\" , CsvTemplate : \"{{ .Kind}};{{ .ContextKind}};{{ .UserKey}};{{ .CreationDate}};{{ .Key}};{{ .Variation}};{{ .Value}};{{ .Default}}\\n\" , Bucket : \"my-bucket\" , S3Path : \"/go-feature-flag/variations/\" , Filename : \"flag-variation-{{ .Timestamp}}.{{ .Format}}\" , AwsConfig : & aws . Config { Region : aws . String ( \"eu-west-1\" ), }, }, }, // ... } Configuration fields Field Description Bucket Name of your S3 Bucket. AwsConfig An instance of aws.Config that configure your access to AWS (see this documentation for more info ) . CsvTemplate (optional) CsvTemplate is used if your output format is CSV. This field will be ignored if you are using another format than CSV. You can decide which fields you want in your CSV line with a go-template syntax, please check internal/exporter/feature_event.go to see what are the fields available. Default: {{ .Kind}};{{ .ContextKind}};{{ .UserKey}};{{ .CreationDate}};{{ .Key}};{{ .Variation}};{{ .Value}};{{ .Default}}\\n Filename (optional) Filename is the name of your output file. You can use a templated config to define the name of your exported files. Available replacement are {{ .Hostname}} , {{ .Timestamp} } and {{ .Format}} Default: flag-variation-{{ .Hostname}}-{{ .Timestamp}}.{{ .Format}} Format (optional) Format is the output format you want in your exported file. Available format are JSON and CSV . (Default: JSON ) S3Path (optional) The location of the directory in S3. Check the godoc for full details .","title":"S3 Exporter"},{"location":"data_collection/s3/#s3-exporter","text":"The S3 exporter will collect the data and create a new file in a specific folder everytime we send the data. Everytime the FlushInterval or MaxEventInMemory is reached a new file will be added to S3. Info If for some reason the S3 upload failed, we will keep the data in memory and retry to add the next time we reach FlushInterval or MaxEventInMemory . Check this complete example to see how to export the data in S3.","title":"S3 Exporter"},{"location":"data_collection/s3/#configuration-example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ffclient . Config { // ... DataExporter : ffclient . DataExporter { // ... Exporter : & s3exporter . Exporter { Format : \"csv\" , FileName : \"flag-variation-{{ .Hostname}}-{{ .Timestamp}}.{{ .Format}}\" , CsvTemplate : \"{{ .Kind}};{{ .ContextKind}};{{ .UserKey}};{{ .CreationDate}};{{ .Key}};{{ .Variation}};{{ .Value}};{{ .Default}}\\n\" , Bucket : \"my-bucket\" , S3Path : \"/go-feature-flag/variations/\" , Filename : \"flag-variation-{{ .Timestamp}}.{{ .Format}}\" , AwsConfig : & aws . Config { Region : aws . String ( \"eu-west-1\" ), }, }, }, // ... }","title":"Configuration example"},{"location":"data_collection/s3/#configuration-fields","text":"Field Description Bucket Name of your S3 Bucket. AwsConfig An instance of aws.Config that configure your access to AWS (see this documentation for more info ) . CsvTemplate (optional) CsvTemplate is used if your output format is CSV. This field will be ignored if you are using another format than CSV. You can decide which fields you want in your CSV line with a go-template syntax, please check internal/exporter/feature_event.go to see what are the fields available. Default: {{ .Kind}};{{ .ContextKind}};{{ .UserKey}};{{ .CreationDate}};{{ .Key}};{{ .Variation}};{{ .Value}};{{ .Default}}\\n Filename (optional) Filename is the name of your output file. You can use a templated config to define the name of your exported files. Available replacement are {{ .Hostname}} , {{ .Timestamp} } and {{ .Format}} Default: flag-variation-{{ .Hostname}}-{{ .Timestamp}}.{{ .Format}} Format (optional) Format is the output format you want in your exported file. Available format are JSON and CSV . (Default: JSON ) S3Path (optional) The location of the directory in S3. Check the godoc for full details .","title":"Configuration fields"},{"location":"data_collection/webhook/","text":"Webhook Exporter The Webhook exporter will collect the data and send them via an HTTP POST request to the specified endpoint. Everytime the FlushInterval or MaxEventInMemory is reached a new call is performed. Info If for some reason the call failed, we will keep the data in memory and retry to add the next time we reach FlushInterval or MaxEventInMemory . Configuration example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ffclient . Config { // ... DataExporter : ffclient . DataExporter { // ... Exporter : & webhookexporter . Exporter { EndpointURL : \" https://webhook.url/\" , Secret : \"secret-for-signing\" , Meta : map [ string ] string { \"extraInfo\" : \"info\" , }, }, }, // ... } Configuration fields Field Description EndpointURL EndpointURL of your webhook Secret (optional) Secret used to sign your request body and fill the X-Hub-Signature-256 header. See signature section for more details. Meta (optional) Add all the information you want to see in your request. Webhook format If you have configured a webhook, a POST request will be sent to the EndpointURL with a body in this format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \"meta\" : { \"hostname\" : \"server01\" , // ... }, \"events\" : [ { \"kind\" : \"feature\" , \"contextKind\" : \"anonymousUser\" , \"userKey\" : \"14613538188334553206\" , \"creationDate\" : 1618909178 , \"key\" : \"test-flag\" , \"variation\" : \"Default\" , \"value\" : false , \"default\" : false }, // ... ] } Signature This header X-Hub-Signature-256 is sent if the webhook is configured with a secret . This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key . Danger The recommendation is to always use the Secret and on your API/webook always verify the signature key to be sure that you don't have a man in the middle attack.","title":"Webhook Exporter"},{"location":"data_collection/webhook/#webhook-exporter","text":"The Webhook exporter will collect the data and send them via an HTTP POST request to the specified endpoint. Everytime the FlushInterval or MaxEventInMemory is reached a new call is performed. Info If for some reason the call failed, we will keep the data in memory and retry to add the next time we reach FlushInterval or MaxEventInMemory .","title":"Webhook Exporter"},{"location":"data_collection/webhook/#configuration-example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 ffclient . Config { // ... DataExporter : ffclient . DataExporter { // ... Exporter : & webhookexporter . Exporter { EndpointURL : \" https://webhook.url/\" , Secret : \"secret-for-signing\" , Meta : map [ string ] string { \"extraInfo\" : \"info\" , }, }, }, // ... }","title":"Configuration example"},{"location":"data_collection/webhook/#configuration-fields","text":"Field Description EndpointURL EndpointURL of your webhook Secret (optional) Secret used to sign your request body and fill the X-Hub-Signature-256 header. See signature section for more details. Meta (optional) Add all the information you want to see in your request.","title":"Configuration fields"},{"location":"data_collection/webhook/#webhook-format","text":"If you have configured a webhook, a POST request will be sent to the EndpointURL with a body in this format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \"meta\" : { \"hostname\" : \"server01\" , // ... }, \"events\" : [ { \"kind\" : \"feature\" , \"contextKind\" : \"anonymousUser\" , \"userKey\" : \"14613538188334553206\" , \"creationDate\" : 1618909178 , \"key\" : \"test-flag\" , \"variation\" : \"Default\" , \"value\" : false , \"default\" : false }, // ... ] }","title":"Webhook format"},{"location":"data_collection/webhook/#signature","text":"This header X-Hub-Signature-256 is sent if the webhook is configured with a secret . This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key . Danger The recommendation is to always use the Secret and on your API/webook always verify the signature key to be sure that you don't have a man in the middle attack.","title":"Signature"},{"location":"flag_file/","text":"Where to store my file? The module supports different ways of retrieving the flag file. Available retriever are: S3 Bucket HTTP endpoint Github File Kubernetes configmap Google Cloud storage To retrieve a file you need to provide a retriever in your ffclient.Config{} during the initialization. If the existing retriever does not work with your system you can extend the system and use a custom retriever .","title":"Where to store my file?"},{"location":"flag_file/#where-to-store-my-file","text":"The module supports different ways of retrieving the flag file. Available retriever are: S3 Bucket HTTP endpoint Github File Kubernetes configmap Google Cloud storage To retrieve a file you need to provide a retriever in your ffclient.Config{} during the initialization. If the existing retriever does not work with your system you can extend the system and use a custom retriever .","title":"Where to store my file?"},{"location":"flag_file/custom/","text":"Custom Retriever To create a custom retriever you must have a struct that implements the Retriever interface. 1 2 3 type Retriever interface { Retrieve ( ctx context . Context ) ([] byte , error ) } The Retrieve function is supposed to load the file and to return a []byte of your flag configuration file. If you want to specify the format of the file, you can use the ffclient.Config.FileFormat option to specify if it is a YAML , JSON or TOML file. You can check existing Retriever ( file , s3 , ...) to have an idea on how to do build your own.","title":"Custom Retriever"},{"location":"flag_file/custom/#custom-retriever","text":"To create a custom retriever you must have a struct that implements the Retriever interface. 1 2 3 type Retriever interface { Retrieve ( ctx context . Context ) ([] byte , error ) } The Retrieve function is supposed to load the file and to return a []byte of your flag configuration file. If you want to specify the format of the file, you can use the ffclient.Config.FileFormat option to specify if it is a YAML , JSON or TOML file. You can check existing Retriever ( file , s3 , ...) to have an idea on how to do build your own.","title":"Custom Retriever"},{"location":"flag_file/file/","text":"File The File Retriever will read a local file to get your flags. Tip Using a file to store your flags is not recommend, except if it is in a shared folder for all your services. Example 1 2 3 4 5 6 7 8 9 10 import \"github.com/thomaspoignant/go-feature-flag/retriever/file\" // ... err := ffclient . Init ( ffclient . Config { PollingInterval : 3 * time . Second , Retriever : & fileretriever . Retriever { Path : \"file-example.yaml\" , }, }) defer ffclient . Close () Configuration fields To configure your File retriever: Field Description Path location of your file on the file system.","title":"File"},{"location":"flag_file/file/#file","text":"The File Retriever will read a local file to get your flags. Tip Using a file to store your flags is not recommend, except if it is in a shared folder for all your services.","title":"File"},{"location":"flag_file/file/#example","text":"1 2 3 4 5 6 7 8 9 10 import \"github.com/thomaspoignant/go-feature-flag/retriever/file\" // ... err := ffclient . Init ( ffclient . Config { PollingInterval : 3 * time . Second , Retriever : & fileretriever . Retriever { Path : \"file-example.yaml\" , }, }) defer ffclient . Close ()","title":"Example"},{"location":"flag_file/file/#configuration-fields","text":"To configure your File retriever: Field Description Path location of your file on the file system.","title":"Configuration fields"},{"location":"flag_file/github/","text":"Github The Github Retriever will perform an HTTP Request with your GitHub configuration to get your flags. Tip GitHub has rate limits, be sure to correctly set your PollingInterval to avoid reaching the limit. Example 1 2 3 4 5 6 7 8 9 10 11 err := ffclient . Init ( ffclient . Config { PollingInterval : 3 * time . Second , Retriever : & githubretriever . Retriever { RepositorySlug : \"thomaspoignant/go-feature-flag\" , Branch : \"main\" , FilePath : \"testdata/flag-config.yaml\" , GithubToken : \"XXXX\" , Timeout : 2 * time . Second , }, }) defer ffclient . Close () Configuration fields To configure the access to your GitHub file: Field Description RepositorySlug Your GitHub slug org/repo-name . FilePath The path of your file. Branch (optional) The branch where your file is. Default: main GithubToken (optional) Github token is used to access a private repository, you need the repo permission ( how to create a GitHub token ) . Timeout (optional) Timeout for the HTTP call Default: 10 seconds","title":"Github"},{"location":"flag_file/github/#github","text":"The Github Retriever will perform an HTTP Request with your GitHub configuration to get your flags. Tip GitHub has rate limits, be sure to correctly set your PollingInterval to avoid reaching the limit.","title":"Github"},{"location":"flag_file/github/#example","text":"1 2 3 4 5 6 7 8 9 10 11 err := ffclient . Init ( ffclient . Config { PollingInterval : 3 * time . Second , Retriever : & githubretriever . Retriever { RepositorySlug : \"thomaspoignant/go-feature-flag\" , Branch : \"main\" , FilePath : \"testdata/flag-config.yaml\" , GithubToken : \"XXXX\" , Timeout : 2 * time . Second , }, }) defer ffclient . Close ()","title":"Example"},{"location":"flag_file/github/#configuration-fields","text":"To configure the access to your GitHub file: Field Description RepositorySlug Your GitHub slug org/repo-name . FilePath The path of your file. Branch (optional) The branch where your file is. Default: main GithubToken (optional) Github token is used to access a private repository, you need the repo permission ( how to create a GitHub token ) . Timeout (optional) Timeout for the HTTP call Default: 10 seconds","title":"Configuration fields"},{"location":"flag_file/google_cloud_storage/","text":"Google Cloud Storage The Google Cloud Storage Retriever will use the google-cloud-storage package and google-api-options package to access your flag in Google Cloud Storage. Example 1 2 3 4 5 6 7 8 9 10 err := ffclient . Init ( ffclient . Config { PollingInterval : 3 * time . Second , Retriever : & gcstorageretriever . Retriever { Options : [] option . ClientOption { option . WithoutAuthentication () }, Bucket : \"2093u4pkasjc3\" , Object : \"flags.yaml\" , } }) defer ffclient . Close () Configuration fields To configure your Google Cloud Storage file location: Field Description Bucket The name of your bucket. Object The name of your object in your bucket. Option An instance of option.ClientOption that configures your access to Google Cloud. Check this documentation for more info .","title":"Google Cloud Storage"},{"location":"flag_file/google_cloud_storage/#google-cloud-storage","text":"The Google Cloud Storage Retriever will use the google-cloud-storage package and google-api-options package to access your flag in Google Cloud Storage.","title":"Google Cloud Storage"},{"location":"flag_file/google_cloud_storage/#example","text":"1 2 3 4 5 6 7 8 9 10 err := ffclient . Init ( ffclient . Config { PollingInterval : 3 * time . Second , Retriever : & gcstorageretriever . Retriever { Options : [] option . ClientOption { option . WithoutAuthentication () }, Bucket : \"2093u4pkasjc3\" , Object : \"flags.yaml\" , } }) defer ffclient . Close ()","title":"Example"},{"location":"flag_file/google_cloud_storage/#configuration-fields","text":"To configure your Google Cloud Storage file location: Field Description Bucket The name of your bucket. Object The name of your object in your bucket. Option An instance of option.ClientOption that configures your access to Google Cloud. Check this documentation for more info .","title":"Configuration fields"},{"location":"flag_file/http/","text":"HTTP endpoint The HTTP Retriever will perform an HTTP Request with your configuration to get your flags. Example 1 2 3 4 5 6 7 8 err := ffclient . Init ( ffclient . Config { PollingInterval : 3 * time . Second , Retriever : & httpretriever . Retriever { URL : \"http://example.com/flag-config.yaml\" , Timeout : 2 * time . Second , }, }) defer ffclient . Close () Configuration fields To configure your HTTP endpoint: Field Description URL Location where to retrieve the file (ex: http://mydomain.io/flag.yaml ) . Method the HTTP method you want to use (default is GET) . Body (optional) If you need a body to get the flags. Header (optional) Header you should pass while calling the endpoint (useful for authorization) . Timeout (optional) Timeout for the HTTP call (default is 10 seconds).","title":"HTTP endpoint"},{"location":"flag_file/http/#http-endpoint","text":"The HTTP Retriever will perform an HTTP Request with your configuration to get your flags.","title":"HTTP endpoint"},{"location":"flag_file/http/#example","text":"1 2 3 4 5 6 7 8 err := ffclient . Init ( ffclient . Config { PollingInterval : 3 * time . Second , Retriever : & httpretriever . Retriever { URL : \"http://example.com/flag-config.yaml\" , Timeout : 2 * time . Second , }, }) defer ffclient . Close ()","title":"Example"},{"location":"flag_file/http/#configuration-fields","text":"To configure your HTTP endpoint: Field Description URL Location where to retrieve the file (ex: http://mydomain.io/flag.yaml ) . Method the HTTP method you want to use (default is GET) . Body (optional) If you need a body to get the flags. Header (optional) Header you should pass while calling the endpoint (useful for authorization) . Timeout (optional) Timeout for the HTTP call (default is 10 seconds).","title":"Configuration fields"},{"location":"flag_file/kubernetes_configmaps/","text":"Kubernetes configmaps The Kubernetes Retriever will access flags in a Kubernetes ConfigMap via the Kubernetes Go client Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import ( restclient \"k8s.io/client-go/rest\" ) config , _ := restclient . InClusterConfig () err = ffclient . Init ( ffclient . Config { PollingInterval : 3 * time . Second , Retriever : & k8sretriever . Retriever { Path : \"file-example.yaml\" , Namespace : \"default\" ConfigMapName : \"my-configmap\" Key : \"somekey.yml\" ClientConfig : & config }, }) defer ffclient . Close () Configuration fields To configure your retriever: Field Description Namespace The namespace of the ConfigMap. ConfigMapName The name of the ConfigMap. Key The key within the ConfigMap storing the flags. ClientConfig The configuration object for the Kubernetes client","title":"Kubernetes configmaps"},{"location":"flag_file/kubernetes_configmaps/#kubernetes-configmaps","text":"The Kubernetes Retriever will access flags in a Kubernetes ConfigMap via the Kubernetes Go client","title":"Kubernetes configmaps"},{"location":"flag_file/kubernetes_configmaps/#example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import ( restclient \"k8s.io/client-go/rest\" ) config , _ := restclient . InClusterConfig () err = ffclient . Init ( ffclient . Config { PollingInterval : 3 * time . Second , Retriever : & k8sretriever . Retriever { Path : \"file-example.yaml\" , Namespace : \"default\" ConfigMapName : \"my-configmap\" Key : \"somekey.yml\" ClientConfig : & config }, }) defer ffclient . Close ()","title":"Example"},{"location":"flag_file/kubernetes_configmaps/#configuration-fields","text":"To configure your retriever: Field Description Namespace The namespace of the ConfigMap. ConfigMapName The name of the ConfigMap. Key The key within the ConfigMap storing the flags. ClientConfig The configuration object for the Kubernetes client","title":"Configuration fields"},{"location":"flag_file/s3/","text":"S3 Bucket The S3Retriever will use the aws-sdk to access your flag in an S3 bucket. Example 1 2 3 4 5 6 7 8 9 10 11 err := ffclient . Init ( ffclient . Config { PollingInterval : 3 * time . Second , Retriever : & s3retriever . Retriever { Bucket : \"tpoi-test\" , Item : \"flag-config.yaml\" , AwsConfig : aws . Config { Region : aws . String ( \"eu-west-1\" ), }, }, }) defer ffclient . Close () Configuration fields To configure your S3 file location: Field Description Bucket The name of your bucket. Item The location of your file in the bucket. AwsConfig An instance of aws.Config that configure your access to AWS check this documentation for more info .","title":"S3 Bucket"},{"location":"flag_file/s3/#s3-bucket","text":"The S3Retriever will use the aws-sdk to access your flag in an S3 bucket.","title":"S3 Bucket"},{"location":"flag_file/s3/#example","text":"1 2 3 4 5 6 7 8 9 10 11 err := ffclient . Init ( ffclient . Config { PollingInterval : 3 * time . Second , Retriever : & s3retriever . Retriever { Bucket : \"tpoi-test\" , Item : \"flag-config.yaml\" , AwsConfig : aws . Config { Region : aws . String ( \"eu-west-1\" ), }, }, }) defer ffclient . Close ()","title":"Example"},{"location":"flag_file/s3/#configuration-fields","text":"To configure your S3 file location: Field Description Bucket The name of your bucket. Item The location of your file in the bucket. AwsConfig An instance of aws.Config that configure your access to AWS check this documentation for more info .","title":"Configuration fields"},{"location":"notifier/","text":"Notify flag changes If you want to be informed when a flag has changed, you can configure a notifier . A notifier will send one notification to the targeted system to inform them that a new flag configuration has been loaded. Info go-feature-flag can handle more than one notifier at a time. Available notifiers are: Slack - Get a Slack message with the changes. Webhook - Call an API with the changes.","title":"Notify flag changes"},{"location":"notifier/#notify-flag-changes","text":"If you want to be informed when a flag has changed, you can configure a notifier . A notifier will send one notification to the targeted system to inform them that a new flag configuration has been loaded. Info go-feature-flag can handle more than one notifier at a time. Available notifiers are: Slack - Get a Slack message with the changes. Webhook - Call an API with the changes.","title":"Notify flag changes"},{"location":"notifier/custom/","text":"Custom Notifier To create a custom notifier you must have a struct that implements the notifier.Notifier interface. 1 2 3 4 5 6 7 8 9 10 11 12 13 import ( ffclient \"github.com/thomaspoignant/go-feature-flag\" \"github.com/thomaspoignant/go-feature-flag/notifier/notifier\" \"sync\" ) type Notifier struct {} func ( c * Notifier ) Notify ( diff notifier . DiffCache , wg * sync . WaitGroup ) error { defer waitGroup . Done () // don't forget this line, if you don't have it you can break your notifications // ... // do whatever you want here }","title":"Custom Notifier"},{"location":"notifier/custom/#custom-notifier","text":"To create a custom notifier you must have a struct that implements the notifier.Notifier interface. 1 2 3 4 5 6 7 8 9 10 11 12 13 import ( ffclient \"github.com/thomaspoignant/go-feature-flag\" \"github.com/thomaspoignant/go-feature-flag/notifier/notifier\" \"sync\" ) type Notifier struct {} func ( c * Notifier ) Notify ( diff notifier . DiffCache , wg * sync . WaitGroup ) error { defer waitGroup . Done () // don't forget this line, if you don't have it you can break your notifications // ... // do whatever you want here }","title":"Custom Notifier"},{"location":"notifier/slack/","text":"Slack Notifier The Slack notifier allows you to get notification on your favorite slack channel when an instance of go-feature-flag is detecting changes in the configuration file. Configure Slack Notification First, you need to create an incoming webhook on your slack instance. You can follow this documentation to see how to do it Copy your webhook URL. It should look like: https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX . In your init method add a slack notifier 1 2 3 4 5 6 7 8 9 ffclient . Config { // ... Notifiers : [] notifier . Notifier { & slacknotifier . Notifier { SlackWebhookURL : \"https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\" , }, // ... }, } Configuration fields Field Description SlackWebhookURL The complete URL of your incoming webhook configured in Slack.","title":"Slack Notifier"},{"location":"notifier/slack/#slack-notifier","text":"The Slack notifier allows you to get notification on your favorite slack channel when an instance of go-feature-flag is detecting changes in the configuration file.","title":"Slack Notifier"},{"location":"notifier/slack/#configure-slack-notification","text":"First, you need to create an incoming webhook on your slack instance. You can follow this documentation to see how to do it Copy your webhook URL. It should look like: https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX . In your init method add a slack notifier 1 2 3 4 5 6 7 8 9 ffclient . Config { // ... Notifiers : [] notifier . Notifier { & slacknotifier . Notifier { SlackWebhookURL : \"https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\" , }, // ... }, }","title":"Configure Slack Notification"},{"location":"notifier/slack/#configuration-fields","text":"Field Description SlackWebhookURL The complete URL of your incoming webhook configured in Slack.","title":"Configuration fields"},{"location":"notifier/webhook/","text":"Webhook Notifier The Webhook notifier will perform an HTTP POST request to the specified endpoint everytime that a change in the flags is detected. The format of the call is specified in the format section and, you can sign the body to trust the data you are receiving. Configure the webhook notifier 1 2 3 4 5 6 7 8 9 10 11 12 13 ffclient . Config { // ... Notifiers : [] notifier . Notifier { & webhooknotifier . Notifier { EndpointURL : \" https://example.com/hook\" , Secret : \"Secret\" , Meta : map [ string ] string { \"app.name\" : \"my app\" , }, }, // ... }, } Configuration fields Field Description EndpointURL The complete URL of your API (we will send a POST request to this URL, see format ) Secret (optional) A secret key you can share with your webhook. We will use this key to sign the request (see signature section for more details) . Meta (optional) A list of key value that will be add in your request, this is super useful if you want to add information on the current running instance of your app. By default the hostname is always added in the meta information. Format If you have configured a webhook, a POST request will be sent to the EndpointURL with a body in this format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"meta\" : { \"hostname\" : \"server01\" , // ... }, \"flags\" : { \"deleted\" : {}, // map of your deleted flags \"added\" : {}, // map of your added flags \"updated\" : { \"flag-name\" : { // an object that contains old and new value \"old_value\" : {}, \"new_value\" : {} } } } } Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 { \"meta\" : { \"hostname\" : \"server01\" }, \"flags\" : { \"deleted\" : { \"untracked-flag\" : { \"variations\" : { \"A\" : false , \"B\" : true }, \"defaultRule\" : { \"percentage\" : { \"A\" : 0 , \"B\" : 100 } } } }, \"added\" : { \"test-flag3\" : { \"variations\" : { \"A\" : false , \"B\" : true }, \"defaultRule\" : { \"percentage\" : { \"A\" : 80 , \"B\" : 20 } }, \"trackEvents\" : false } }, \"updated\" : { \"test-flag2\" : { \"old-value\" : { \"variations\" : { \"A\" : false , \"B\" : true }, \"defaultRule\" : { \"percentage\" : { \"A\" : 80 , \"B\" : 20 } }, \"trackEvents\" : false } \"new_value\" : { \"variations\" : { \"A\" : false , \"B\" : true }, \"defaultRule\" : { \"percentage\" : { \"A\" : 80 , \"B\" : 20 } }, \"trackEvents\" : true } } } } } Signature This header X-Hub-Signature-256 is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. Danger The recommendation is to always use the Secret and on your API/webook always verify the signature key to be sure that you don't have a man in the middle attack.","title":"Webhook Notifier"},{"location":"notifier/webhook/#webhook-notifier","text":"The Webhook notifier will perform an HTTP POST request to the specified endpoint everytime that a change in the flags is detected. The format of the call is specified in the format section and, you can sign the body to trust the data you are receiving.","title":"Webhook Notifier"},{"location":"notifier/webhook/#configure-the-webhook-notifier","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 ffclient . Config { // ... Notifiers : [] notifier . Notifier { & webhooknotifier . Notifier { EndpointURL : \" https://example.com/hook\" , Secret : \"Secret\" , Meta : map [ string ] string { \"app.name\" : \"my app\" , }, }, // ... }, }","title":"Configure the webhook notifier"},{"location":"notifier/webhook/#configuration-fields","text":"Field Description EndpointURL The complete URL of your API (we will send a POST request to this URL, see format ) Secret (optional) A secret key you can share with your webhook. We will use this key to sign the request (see signature section for more details) . Meta (optional) A list of key value that will be add in your request, this is super useful if you want to add information on the current running instance of your app. By default the hostname is always added in the meta information.","title":"Configuration fields"},{"location":"notifier/webhook/#format","text":"If you have configured a webhook, a POST request will be sent to the EndpointURL with a body in this format: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"meta\" : { \"hostname\" : \"server01\" , // ... }, \"flags\" : { \"deleted\" : {}, // map of your deleted flags \"added\" : {}, // map of your added flags \"updated\" : { \"flag-name\" : { // an object that contains old and new value \"old_value\" : {}, \"new_value\" : {} } } } }","title":"Format"},{"location":"notifier/webhook/#example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 { \"meta\" : { \"hostname\" : \"server01\" }, \"flags\" : { \"deleted\" : { \"untracked-flag\" : { \"variations\" : { \"A\" : false , \"B\" : true }, \"defaultRule\" : { \"percentage\" : { \"A\" : 0 , \"B\" : 100 } } } }, \"added\" : { \"test-flag3\" : { \"variations\" : { \"A\" : false , \"B\" : true }, \"defaultRule\" : { \"percentage\" : { \"A\" : 80 , \"B\" : 20 } }, \"trackEvents\" : false } }, \"updated\" : { \"test-flag2\" : { \"old-value\" : { \"variations\" : { \"A\" : false , \"B\" : true }, \"defaultRule\" : { \"percentage\" : { \"A\" : 80 , \"B\" : 20 } }, \"trackEvents\" : false } \"new_value\" : { \"variations\" : { \"A\" : false , \"B\" : true }, \"defaultRule\" : { \"percentage\" : { \"A\" : 80 , \"B\" : 20 } }, \"trackEvents\" : true } } } } }","title":"Example"},{"location":"notifier/webhook/#signature","text":"This header X-Hub-Signature-256 is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. Danger The recommendation is to always use the Secret and on your API/webook always verify the signature key to be sure that you don't have a man in the middle attack.","title":"Signature"},{"location":"rollout/","text":"Rollout strategies A critical part of every new feature release is orchestrating the actual launch schedule between Product, Engineering, and Marketing teams. Delivering powerful user experiences typically requires software teams to manage complex releases and make manual updates at inconvenient times. But it does not have to, having a complex rollout strategy allows you to have lifecycle for your flags. Complex rollout strategy available Canary releases - impact randomly a subset of your users. Progressive rollout - increase the percentage of your flag over time. Scheduled rollout - update your flag over time. Experimentation rollout - serve your feature only for a determined time (perfect for A/B testing) .","title":"Rollout strategies"},{"location":"rollout/#rollout-strategies","text":"A critical part of every new feature release is orchestrating the actual launch schedule between Product, Engineering, and Marketing teams. Delivering powerful user experiences typically requires software teams to manage complex releases and make manual updates at inconvenient times. But it does not have to, having a complex rollout strategy allows you to have lifecycle for your flags.","title":"Rollout strategies"},{"location":"rollout/#complex-rollout-strategy-available","text":"Canary releases - impact randomly a subset of your users. Progressive rollout - increase the percentage of your flag over time. Scheduled rollout - update your flag over time. Experimentation rollout - serve your feature only for a determined time (perfect for A/B testing) .","title":"Complex rollout strategy available"},{"location":"rollout/canary/","text":"Canary Release Canary release is a technique to reduce the risk of introducing a new software version in production by slowly rolling out the change to a small subset of users before rolling it out to the entire infrastructure and making it available to everybody. This is the easiest rollout strategy available. You just have to select a percentage of your users in your flag, and the True behavior will apply to them. Example YAML 1 2 3 4 5 6 7 8 canary-flag : variations : oldBehavior : false canary : true defaultRule : percentage : oldBehavior : 99 canary : 1 JSON 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"canary-flag\" : { \"variations\" : { \"oldBehavior\" : false , \"canary\" : true }, \"defaultRule\" : { \"percentage\" : { \"oldBehavior\" : 99 , \"canary\" : 1 } } } } TOML 1 2 3 4 5 6 7 [canary-flag.variations] oldBehavior = false canary = true [canary-flag.defaultRule.percentage] oldBehavior = 99 canary = 1","title":"Canary Release"},{"location":"rollout/canary/#canary-release","text":"Canary release is a technique to reduce the risk of introducing a new software version in production by slowly rolling out the change to a small subset of users before rolling it out to the entire infrastructure and making it available to everybody. This is the easiest rollout strategy available. You just have to select a percentage of your users in your flag, and the True behavior will apply to them.","title":"Canary Release"},{"location":"rollout/canary/#example","text":"YAML 1 2 3 4 5 6 7 8 canary-flag : variations : oldBehavior : false canary : true defaultRule : percentage : oldBehavior : 99 canary : 1 JSON 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"canary-flag\" : { \"variations\" : { \"oldBehavior\" : false , \"canary\" : true }, \"defaultRule\" : { \"percentage\" : { \"oldBehavior\" : 99 , \"canary\" : 1 } } } } TOML 1 2 3 4 5 6 7 [canary-flag.variations] oldBehavior = false canary = true [canary-flag.defaultRule.percentage] oldBehavior = 99 canary = 1","title":"Example"},{"location":"rollout/experimentation/","text":"Experimentation rollout / A/B Testing An experimentation rollout is when your flag is configured to be served only for a determined time. It means that before the rollout start date, the flag is considered disabled (we serve the default value from the SDK) . Between the dates the flag is evaluated. After the end date the flag is considered disabled. Example YAML 1 2 3 4 5 6 7 8 9 10 11 experimentation-flag : variations : variationA : A variationB : B defaultRule : percentage : variationA : 50 variationB : 50 experimentation : start : 2021-03-20T00:00:00.1-05:00 end : 2021-03-21T00:00:00.1-05:00 JSON 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"experimentation-flag\" : { \"variations\" : { \"variationA\" : \"A\" , \"variationB\" : \"B\" }, \"defaultRule\" : { \"percentage\" : { \"variationA\" : 50 , \"variationB\" : 50 } }, \"experimentation\" : { \"start\" : \"2021-03-20T05:00:00.100Z\" , \"end\" : \"2021-03-21T05:00:00.100Z\" } } } TOML 1 2 3 4 5 6 7 8 9 10 11 [experimentation-flag.variations] variationA = \"A\" variationB = \"B\" [experimentation-flag.defaultRule.percentage] variationA = 50 variationB = 50 [experimentation-flag.experimentation] start = 2021-03-20 T05 : 00 : 00.100 Z end = 2021-03-21 T05 : 00 : 00.100 Z Check this example to see how it works. Configuration fields Info The dates are in the format supported natively by your flag file format. Field Description start The date the flag will be started to be served. end The date the flag will be stopped to be served. A/B testing Info A/B test is the shorthand for a simple controlled experiment. As the name implies, two versions (A and B) of a single variable are compared, which are identical except for one variation that might affect a user's behavior. A/B tests are widely considered the simplest form of controlled experiment. (source wikipedia) To have a proper A/B testing solution with the module you should use the experimentation rollout combined with the export of your data . This combination will allow to have your experimentation running for a dedicated time, and you will have the data to knows exactly which user was on which version of the flag. To setup the duration of your A/B test you can use a tool ab-test-duration-calculator from vwo, that will help you to set up the test duration correctly.","title":"Experimentation rollout / A/B Testing"},{"location":"rollout/experimentation/#experimentation-rollout-ab-testing","text":"An experimentation rollout is when your flag is configured to be served only for a determined time. It means that before the rollout start date, the flag is considered disabled (we serve the default value from the SDK) . Between the dates the flag is evaluated. After the end date the flag is considered disabled.","title":"Experimentation rollout / A/B Testing"},{"location":"rollout/experimentation/#example","text":"YAML 1 2 3 4 5 6 7 8 9 10 11 experimentation-flag : variations : variationA : A variationB : B defaultRule : percentage : variationA : 50 variationB : 50 experimentation : start : 2021-03-20T00:00:00.1-05:00 end : 2021-03-21T00:00:00.1-05:00 JSON 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"experimentation-flag\" : { \"variations\" : { \"variationA\" : \"A\" , \"variationB\" : \"B\" }, \"defaultRule\" : { \"percentage\" : { \"variationA\" : 50 , \"variationB\" : 50 } }, \"experimentation\" : { \"start\" : \"2021-03-20T05:00:00.100Z\" , \"end\" : \"2021-03-21T05:00:00.100Z\" } } } TOML 1 2 3 4 5 6 7 8 9 10 11 [experimentation-flag.variations] variationA = \"A\" variationB = \"B\" [experimentation-flag.defaultRule.percentage] variationA = 50 variationB = 50 [experimentation-flag.experimentation] start = 2021-03-20 T05 : 00 : 00.100 Z end = 2021-03-21 T05 : 00 : 00.100 Z Check this example to see how it works.","title":"Example"},{"location":"rollout/experimentation/#configuration-fields","text":"Info The dates are in the format supported natively by your flag file format. Field Description start The date the flag will be started to be served. end The date the flag will be stopped to be served.","title":"Configuration fields"},{"location":"rollout/experimentation/#ab-testing","text":"Info A/B test is the shorthand for a simple controlled experiment. As the name implies, two versions (A and B) of a single variable are compared, which are identical except for one variation that might affect a user's behavior. A/B tests are widely considered the simplest form of controlled experiment. (source wikipedia) To have a proper A/B testing solution with the module you should use the experimentation rollout combined with the export of your data . This combination will allow to have your experimentation running for a dedicated time, and you will have the data to knows exactly which user was on which version of the flag. To setup the duration of your A/B test you can use a tool ab-test-duration-calculator from vwo, that will help you to set up the test duration correctly.","title":"A/B testing"},{"location":"rollout/progressive/","text":"Progressive rollout A progressive rollout allows you to increase the percentage of your flag over time. You can select a release ramp where the percentage of your flag will increase progressively between the start date and the end date. Example YAML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 progressive-flag : variations : variationA : A variationB : B defaultRule : progressiveRollout : initial : variation : variationB percentage : 0 date : 2021-03-20T00:00:00.1-05:00 end : variation : variationB percentage : 100 date : 2021-03-21T00:00:00.1-05:00 JSON 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { \"progressive-flag\" : { \"variations\" : { \"variationA\" : \"A\" , \"variationB\" : \"B\" }, \"defaultRule\" : { \"progressiveRollout\" : { \"initial\" : { \"variation\" : \"variationB\" , \"percentage\" : 0 , \"date\" : \"2021-03-20T05:00:00.100Z\" }, \"end\" : { \"variation\" : \"variationB\" , \"percentage\" : 100 , \"date\" : \"2021-03-21T05:00:00.100Z\" } } } } } TOML 1 2 3 4 5 6 7 8 9 10 11 12 13 [progressive-flag.variations] variationA = \"A\" variationB = \"B\" [progressive-flag.defaultRule.progressiveRollout.initial] variation = \"variationB\" percentage = 0 date = 2021-03-20 T05 : 00 : 00.100 Z [progressive-flag.defaultRule.progressiveRollout.end] variation = \"variationB\" percentage = 100 date = 2021-03-21 T05 : 00 : 00.100 Z Configuration fields Info The dates are in the format supported natively by your flag file format. Field Description releaseRamp It contains the time slot where we will progressively increase the percentage of the flag. Before the start date we will serve the percentage.initial percentage of the flag. Between start and end we will serve a percentage of the flag corresponding of the actual time. After the end date we will serve the percentage.end percentage of the flag. If you have no date in your releaseRamp we will not do any progressive rollout and use the top level percentage you have configured (0% in our example) . percentage (optional) It represents the ramp of progress, at which level the flag starts ( initial ) and at which level it ends ( end ). Default: initial = 0 and end = 100","title":"Progressive rollout"},{"location":"rollout/progressive/#progressive-rollout","text":"A progressive rollout allows you to increase the percentage of your flag over time. You can select a release ramp where the percentage of your flag will increase progressively between the start date and the end date.","title":"Progressive rollout"},{"location":"rollout/progressive/#example","text":"YAML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 progressive-flag : variations : variationA : A variationB : B defaultRule : progressiveRollout : initial : variation : variationB percentage : 0 date : 2021-03-20T00:00:00.1-05:00 end : variation : variationB percentage : 100 date : 2021-03-21T00:00:00.1-05:00 JSON 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { \"progressive-flag\" : { \"variations\" : { \"variationA\" : \"A\" , \"variationB\" : \"B\" }, \"defaultRule\" : { \"progressiveRollout\" : { \"initial\" : { \"variation\" : \"variationB\" , \"percentage\" : 0 , \"date\" : \"2021-03-20T05:00:00.100Z\" }, \"end\" : { \"variation\" : \"variationB\" , \"percentage\" : 100 , \"date\" : \"2021-03-21T05:00:00.100Z\" } } } } } TOML 1 2 3 4 5 6 7 8 9 10 11 12 13 [progressive-flag.variations] variationA = \"A\" variationB = \"B\" [progressive-flag.defaultRule.progressiveRollout.initial] variation = \"variationB\" percentage = 0 date = 2021-03-20 T05 : 00 : 00.100 Z [progressive-flag.defaultRule.progressiveRollout.end] variation = \"variationB\" percentage = 100 date = 2021-03-21 T05 : 00 : 00.100 Z","title":"Example"},{"location":"rollout/progressive/#configuration-fields","text":"Info The dates are in the format supported natively by your flag file format. Field Description releaseRamp It contains the time slot where we will progressively increase the percentage of the flag. Before the start date we will serve the percentage.initial percentage of the flag. Between start and end we will serve a percentage of the flag corresponding of the actual time. After the end date we will serve the percentage.end percentage of the flag. If you have no date in your releaseRamp we will not do any progressive rollout and use the top level percentage you have configured (0% in our example) . percentage (optional) It represents the ramp of progress, at which level the flag starts ( initial ) and at which level it ends ( end ). Default: initial = 0 and end = 100","title":"Configuration fields"},{"location":"rollout/scheduled/","text":"Scheduled rollout Scheduling introduces the ability for users to changes their flags for future points in time. While this sounds deceptively straightforward, it unlocks the potential for users to create complex release strategies by scheduling the incremental steps in advance. For example, you may want to turn a feature ON for internal testing tomorrow and then enable it for your \u2018beta\u2019 user segment four days later. Example YAML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 scheduled-flag : variations : variationA : A variationB : B defaultRule : name : legacyDefaultRule percentage : variationA : 100 variationB : 0 scheduledRollout : - date : 2020-04-10T00:00:00.1+02:00 targeting : - name : legacyRuleV0 query : beta eq \"true\" percentage : variationA : 0 variationB : 100 - date : 2022-05-12T15:36:00.1+02:00 targeting : - name : legacyRuleV0 query : beta eq \"false\" JSON 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 { \"scheduled-flag\" : { \"variations\" : { \"variationA\" : \"A\" , \"variationB\" : \"B\" }, \"defaultRule\" : { \"name\" : \"legacyDefaultRule\" , \"percentage\" : { \"variationA\" : 100 , \"variationB\" : 0 } }, \"scheduledRollout\" : [ { \"date\" : \"2020-04-09T22:00:00.100Z\" , \"targeting\" : [ { \"name\" : \"legacyRuleV0\" , \"query\" : \"beta eq \\\"true\\\"\" , \"percentage\" : { \"variationA\" : 0 , \"variationB\" : 100 } } ] }, { \"date\" : \"2022-05-12T13:36:00.100Z\" , \"targeting\" : [ { \"name\" : \"legacyRuleV0\" , \"query\" : \"beta eq \\\"false\\\"\" } ] } ] } } TOML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 [scheduled-flag.variations] variationA = \"A\" variationB = \"B\" [scheduled-flag.defaultRule] name = \"legacyDefaultRule\" [scheduled-flag.defaultRule.percentage] variationA = 100 variationB = 0 [[scheduled-flag.scheduledRollout]] date = 2020-04-09 T22 : 00 : 00.100 Z [[scheduled-flag.scheduledRollout.targeting]] name = \"legacyRuleV0\" query = 'beta eq \"true\"' [scheduled-flag.scheduledRollout.targeting.percentage] variationA = 0 variationB = 100 [[scheduled-flag.scheduledRollout]] date = 2022-05-12 T13 : 36 : 00.100 Z [[scheduled-flag.scheduledRollout.targeting]] name = \"legacyRuleV0\" query = 'beta eq \"false\"' Configuration fields Info You can change any fields that are available on your flag. Since your configuration has not been changed manually, it does not trigger any notifier. Field Description steps The only mandatory field in a step is the date . If no date is provided the step will be skipped. The other attributes of your step are what you want to update your flag, so every field available in the flag format can be updated. The new value in a field will override the existing one.","title":"Scheduled rollout"},{"location":"rollout/scheduled/#scheduled-rollout","text":"Scheduling introduces the ability for users to changes their flags for future points in time. While this sounds deceptively straightforward, it unlocks the potential for users to create complex release strategies by scheduling the incremental steps in advance. For example, you may want to turn a feature ON for internal testing tomorrow and then enable it for your \u2018beta\u2019 user segment four days later.","title":"Scheduled rollout"},{"location":"rollout/scheduled/#example","text":"YAML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 scheduled-flag : variations : variationA : A variationB : B defaultRule : name : legacyDefaultRule percentage : variationA : 100 variationB : 0 scheduledRollout : - date : 2020-04-10T00:00:00.1+02:00 targeting : - name : legacyRuleV0 query : beta eq \"true\" percentage : variationA : 0 variationB : 100 - date : 2022-05-12T15:36:00.1+02:00 targeting : - name : legacyRuleV0 query : beta eq \"false\" JSON 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 { \"scheduled-flag\" : { \"variations\" : { \"variationA\" : \"A\" , \"variationB\" : \"B\" }, \"defaultRule\" : { \"name\" : \"legacyDefaultRule\" , \"percentage\" : { \"variationA\" : 100 , \"variationB\" : 0 } }, \"scheduledRollout\" : [ { \"date\" : \"2020-04-09T22:00:00.100Z\" , \"targeting\" : [ { \"name\" : \"legacyRuleV0\" , \"query\" : \"beta eq \\\"true\\\"\" , \"percentage\" : { \"variationA\" : 0 , \"variationB\" : 100 } } ] }, { \"date\" : \"2022-05-12T13:36:00.100Z\" , \"targeting\" : [ { \"name\" : \"legacyRuleV0\" , \"query\" : \"beta eq \\\"false\\\"\" } ] } ] } } TOML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 [scheduled-flag.variations] variationA = \"A\" variationB = \"B\" [scheduled-flag.defaultRule] name = \"legacyDefaultRule\" [scheduled-flag.defaultRule.percentage] variationA = 100 variationB = 0 [[scheduled-flag.scheduledRollout]] date = 2020-04-09 T22 : 00 : 00.100 Z [[scheduled-flag.scheduledRollout.targeting]] name = \"legacyRuleV0\" query = 'beta eq \"true\"' [scheduled-flag.scheduledRollout.targeting.percentage] variationA = 0 variationB = 100 [[scheduled-flag.scheduledRollout]] date = 2022-05-12 T13 : 36 : 00.100 Z [[scheduled-flag.scheduledRollout.targeting]] name = \"legacyRuleV0\" query = 'beta eq \"false\"'","title":"Example"},{"location":"rollout/scheduled/#configuration-fields","text":"Info You can change any fields that are available on your flag. Since your configuration has not been changed manually, it does not trigger any notifier. Field Description steps The only mandatory field in a step is the date . If no date is provided the step will be skipped. The other attributes of your step are what you want to update your flag, so every field available in the flag format can be updated. The new value in a field will override the existing one.","title":"Configuration fields"}]}